// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/rent"
	"github.com/PON/app/ent/room"
	"github.com/PON/app/ent/roomage"
	"github.com/PON/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Rent is the model entity for the Rent schema.
type Rent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RentAge holds the value of the "RentAge" field.
	RentAge string `json:"RentAge,omitempty"`
	// CidUser holds the value of the "CidUser" field.
	CidUser string `json:"CidUser,omitempty"`
	// RentDate holds the value of the "RentDate" field.
	RentDate string `json:"RentDate,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RentQuery when eager-loading is set.
	Edges                    RentEdges `json:"edges"`
	insurance_insurance_rent *int
	room_room_rent           *int
	roomage_roomage_rent     *int
	user_user_rent           *int
}

// RentEdges holds the relations/edges for other nodes in the graph.
type RentEdges struct {
	// RentRoom holds the value of the RentRoom edge.
	RentRoom *Room
	// RentUser holds the value of the RentUser edge.
	RentUser *User
	// RentInsurance holds the value of the RentInsurance edge.
	RentInsurance *Insurance
	// RentRoomage holds the value of the RentRoomage edge.
	RentRoomage *Roomage
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// RentRoomOrErr returns the RentRoom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentEdges) RentRoomOrErr() (*Room, error) {
	if e.loadedTypes[0] {
		if e.RentRoom == nil {
			// The edge RentRoom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.RentRoom, nil
	}
	return nil, &NotLoadedError{edge: "RentRoom"}
}

// RentUserOrErr returns the RentUser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentEdges) RentUserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.RentUser == nil {
			// The edge RentUser was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.RentUser, nil
	}
	return nil, &NotLoadedError{edge: "RentUser"}
}

// RentInsuranceOrErr returns the RentInsurance value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentEdges) RentInsuranceOrErr() (*Insurance, error) {
	if e.loadedTypes[2] {
		if e.RentInsurance == nil {
			// The edge RentInsurance was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: insurance.Label}
		}
		return e.RentInsurance, nil
	}
	return nil, &NotLoadedError{edge: "RentInsurance"}
}

// RentRoomageOrErr returns the RentRoomage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RentEdges) RentRoomageOrErr() (*Roomage, error) {
	if e.loadedTypes[3] {
		if e.RentRoomage == nil {
			// The edge RentRoomage was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomage.Label}
		}
		return e.RentRoomage, nil
	}
	return nil, &NotLoadedError{edge: "RentRoomage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rent) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // RentAge
		&sql.NullString{}, // CidUser
		&sql.NullString{}, // RentDate
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Rent) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // insurance_insurance_rent
		&sql.NullInt64{}, // room_room_rent
		&sql.NullInt64{}, // roomage_roomage_rent
		&sql.NullInt64{}, // user_user_rent
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rent fields.
func (r *Rent) assignValues(values ...interface{}) error {
	if m, n := len(values), len(rent.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field RentAge", values[0])
	} else if value.Valid {
		r.RentAge = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field CidUser", values[1])
	} else if value.Valid {
		r.CidUser = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field RentDate", values[2])
	} else if value.Valid {
		r.RentDate = value.String
	}
	values = values[3:]
	if len(values) == len(rent.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field insurance_insurance_rent", value)
		} else if value.Valid {
			r.insurance_insurance_rent = new(int)
			*r.insurance_insurance_rent = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_room_rent", value)
		} else if value.Valid {
			r.room_room_rent = new(int)
			*r.room_room_rent = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field roomage_roomage_rent", value)
		} else if value.Valid {
			r.roomage_roomage_rent = new(int)
			*r.roomage_roomage_rent = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_user_rent", value)
		} else if value.Valid {
			r.user_user_rent = new(int)
			*r.user_user_rent = int(value.Int64)
		}
	}
	return nil
}

// QueryRentRoom queries the RentRoom edge of the Rent.
func (r *Rent) QueryRentRoom() *RoomQuery {
	return (&RentClient{config: r.config}).QueryRentRoom(r)
}

// QueryRentUser queries the RentUser edge of the Rent.
func (r *Rent) QueryRentUser() *UserQuery {
	return (&RentClient{config: r.config}).QueryRentUser(r)
}

// QueryRentInsurance queries the RentInsurance edge of the Rent.
func (r *Rent) QueryRentInsurance() *InsuranceQuery {
	return (&RentClient{config: r.config}).QueryRentInsurance(r)
}

// QueryRentRoomage queries the RentRoomage edge of the Rent.
func (r *Rent) QueryRentRoomage() *RoomageQuery {
	return (&RentClient{config: r.config}).QueryRentRoomage(r)
}

// Update returns a builder for updating this Rent.
// Note that, you need to call Rent.Unwrap() before calling this method, if this Rent
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rent) Update() *RentUpdateOne {
	return (&RentClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Rent) Unwrap() *Rent {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rent is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rent) String() string {
	var builder strings.Builder
	builder.WriteString("Rent(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", RentAge=")
	builder.WriteString(r.RentAge)
	builder.WriteString(", CidUser=")
	builder.WriteString(r.CidUser)
	builder.WriteString(", RentDate=")
	builder.WriteString(r.RentDate)
	builder.WriteByte(')')
	return builder.String()
}

// Rents is a parsable slice of Rent.
type Rents []*Rent

func (r Rents) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
