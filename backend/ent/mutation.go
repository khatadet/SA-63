// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/rent"
	"github.com/PON/app/ent/room"
	"github.com/PON/app/ent/roomage"
	"github.com/PON/app/ent/roomstatus"
	"github.com/PON/app/ent/roomtype"
	"github.com/PON/app/ent/user"
	"github.com/PON/app/ent/userstatus"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeInsurance  = "Insurance"
	TypeRent       = "Rent"
	TypeRoom       = "Room"
	TypeRoomStatus = "RoomStatus"
	TypeRoomType   = "RoomType"
	TypeRoomage    = "Roomage"
	TypeUser       = "User"
	TypeUserStatus = "UserStatus"
)

// InsuranceMutation represents an operation that mutate the Insurances
// nodes in the graph.
type InsuranceMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_Insurance            *int
	add_Insurance         *int
	clearedFields         map[string]struct{}
	_InsuranceRent        map[int]struct{}
	removed_InsuranceRent map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*Insurance, error)
}

var _ ent.Mutation = (*InsuranceMutation)(nil)

// insuranceOption allows to manage the mutation configuration using functional options.
type insuranceOption func(*InsuranceMutation)

// newInsuranceMutation creates new mutation for $n.Name.
func newInsuranceMutation(c config, op Op, opts ...insuranceOption) *InsuranceMutation {
	m := &InsuranceMutation{
		config:        c,
		op:            op,
		typ:           TypeInsurance,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInsuranceID sets the id field of the mutation.
func withInsuranceID(id int) insuranceOption {
	return func(m *InsuranceMutation) {
		var (
			err   error
			once  sync.Once
			value *Insurance
		)
		m.oldValue = func(ctx context.Context) (*Insurance, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Insurance.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInsurance sets the old Insurance of the mutation.
func withInsurance(node *Insurance) insuranceOption {
	return func(m *InsuranceMutation) {
		m.oldValue = func(context.Context) (*Insurance, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InsuranceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InsuranceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *InsuranceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetInsurance sets the Insurance field.
func (m *InsuranceMutation) SetInsurance(i int) {
	m._Insurance = &i
	m.add_Insurance = nil
}

// Insurance returns the Insurance value in the mutation.
func (m *InsuranceMutation) Insurance() (r int, exists bool) {
	v := m._Insurance
	if v == nil {
		return
	}
	return *v, true
}

// OldInsurance returns the old Insurance value of the Insurance.
// If the Insurance object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *InsuranceMutation) OldInsurance(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInsurance is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInsurance requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInsurance: %w", err)
	}
	return oldValue.Insurance, nil
}

// AddInsurance adds i to Insurance.
func (m *InsuranceMutation) AddInsurance(i int) {
	if m.add_Insurance != nil {
		*m.add_Insurance += i
	} else {
		m.add_Insurance = &i
	}
}

// AddedInsurance returns the value that was added to the Insurance field in this mutation.
func (m *InsuranceMutation) AddedInsurance() (r int, exists bool) {
	v := m.add_Insurance
	if v == nil {
		return
	}
	return *v, true
}

// ResetInsurance reset all changes of the "Insurance" field.
func (m *InsuranceMutation) ResetInsurance() {
	m._Insurance = nil
	m.add_Insurance = nil
}

// AddInsuranceRentIDs adds the InsuranceRent edge to Rent by ids.
func (m *InsuranceMutation) AddInsuranceRentIDs(ids ...int) {
	if m._InsuranceRent == nil {
		m._InsuranceRent = make(map[int]struct{})
	}
	for i := range ids {
		m._InsuranceRent[ids[i]] = struct{}{}
	}
}

// RemoveInsuranceRentIDs removes the InsuranceRent edge to Rent by ids.
func (m *InsuranceMutation) RemoveInsuranceRentIDs(ids ...int) {
	if m.removed_InsuranceRent == nil {
		m.removed_InsuranceRent = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_InsuranceRent[ids[i]] = struct{}{}
	}
}

// RemovedInsuranceRent returns the removed ids of InsuranceRent.
func (m *InsuranceMutation) RemovedInsuranceRentIDs() (ids []int) {
	for id := range m.removed_InsuranceRent {
		ids = append(ids, id)
	}
	return
}

// InsuranceRentIDs returns the InsuranceRent ids in the mutation.
func (m *InsuranceMutation) InsuranceRentIDs() (ids []int) {
	for id := range m._InsuranceRent {
		ids = append(ids, id)
	}
	return
}

// ResetInsuranceRent reset all changes of the "InsuranceRent" edge.
func (m *InsuranceMutation) ResetInsuranceRent() {
	m._InsuranceRent = nil
	m.removed_InsuranceRent = nil
}

// Op returns the operation name.
func (m *InsuranceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Insurance).
func (m *InsuranceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *InsuranceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Insurance != nil {
		fields = append(fields, insurance.FieldInsurance)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *InsuranceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case insurance.FieldInsurance:
		return m.Insurance()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *InsuranceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case insurance.FieldInsurance:
		return m.OldInsurance(ctx)
	}
	return nil, fmt.Errorf("unknown Insurance field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *InsuranceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case insurance.FieldInsurance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInsurance(v)
		return nil
	}
	return fmt.Errorf("unknown Insurance field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *InsuranceMutation) AddedFields() []string {
	var fields []string
	if m.add_Insurance != nil {
		fields = append(fields, insurance.FieldInsurance)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *InsuranceMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case insurance.FieldInsurance:
		return m.AddedInsurance()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *InsuranceMutation) AddField(name string, value ent.Value) error {
	switch name {
	case insurance.FieldInsurance:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInsurance(v)
		return nil
	}
	return fmt.Errorf("unknown Insurance numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *InsuranceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *InsuranceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *InsuranceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Insurance nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *InsuranceMutation) ResetField(name string) error {
	switch name {
	case insurance.FieldInsurance:
		m.ResetInsurance()
		return nil
	}
	return fmt.Errorf("unknown Insurance field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *InsuranceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._InsuranceRent != nil {
		edges = append(edges, insurance.EdgeInsuranceRent)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *InsuranceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case insurance.EdgeInsuranceRent:
		ids := make([]ent.Value, 0, len(m._InsuranceRent))
		for id := range m._InsuranceRent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *InsuranceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_InsuranceRent != nil {
		edges = append(edges, insurance.EdgeInsuranceRent)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *InsuranceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case insurance.EdgeInsuranceRent:
		ids := make([]ent.Value, 0, len(m.removed_InsuranceRent))
		for id := range m.removed_InsuranceRent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *InsuranceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *InsuranceMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *InsuranceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Insurance unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *InsuranceMutation) ResetEdge(name string) error {
	switch name {
	case insurance.EdgeInsuranceRent:
		m.ResetInsuranceRent()
		return nil
	}
	return fmt.Errorf("unknown Insurance edge %s", name)
}

// RentMutation represents an operation that mutate the Rents
// nodes in the graph.
type RentMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_RentAge              *string
	_CidUser              *string
	_RentDate             *string
	clearedFields         map[string]struct{}
	_RentRoom             *int
	cleared_RentRoom      bool
	_RentUser             *int
	cleared_RentUser      bool
	_RentInsurance        *int
	cleared_RentInsurance bool
	_RentRoomage          *int
	cleared_RentRoomage   bool
	done                  bool
	oldValue              func(context.Context) (*Rent, error)
}

var _ ent.Mutation = (*RentMutation)(nil)

// rentOption allows to manage the mutation configuration using functional options.
type rentOption func(*RentMutation)

// newRentMutation creates new mutation for $n.Name.
func newRentMutation(c config, op Op, opts ...rentOption) *RentMutation {
	m := &RentMutation{
		config:        c,
		op:            op,
		typ:           TypeRent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRentID sets the id field of the mutation.
func withRentID(id int) rentOption {
	return func(m *RentMutation) {
		var (
			err   error
			once  sync.Once
			value *Rent
		)
		m.oldValue = func(ctx context.Context) (*Rent, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rent.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRent sets the old Rent of the mutation.
func withRent(node *Rent) rentOption {
	return func(m *RentMutation) {
		m.oldValue = func(context.Context) (*Rent, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRentAge sets the RentAge field.
func (m *RentMutation) SetRentAge(s string) {
	m._RentAge = &s
}

// RentAge returns the RentAge value in the mutation.
func (m *RentMutation) RentAge() (r string, exists bool) {
	v := m._RentAge
	if v == nil {
		return
	}
	return *v, true
}

// OldRentAge returns the old RentAge value of the Rent.
// If the Rent object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RentMutation) OldRentAge(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRentAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRentAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRentAge: %w", err)
	}
	return oldValue.RentAge, nil
}

// ResetRentAge reset all changes of the "RentAge" field.
func (m *RentMutation) ResetRentAge() {
	m._RentAge = nil
}

// SetCidUser sets the CidUser field.
func (m *RentMutation) SetCidUser(s string) {
	m._CidUser = &s
}

// CidUser returns the CidUser value in the mutation.
func (m *RentMutation) CidUser() (r string, exists bool) {
	v := m._CidUser
	if v == nil {
		return
	}
	return *v, true
}

// OldCidUser returns the old CidUser value of the Rent.
// If the Rent object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RentMutation) OldCidUser(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCidUser is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCidUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCidUser: %w", err)
	}
	return oldValue.CidUser, nil
}

// ResetCidUser reset all changes of the "CidUser" field.
func (m *RentMutation) ResetCidUser() {
	m._CidUser = nil
}

// SetRentDate sets the RentDate field.
func (m *RentMutation) SetRentDate(s string) {
	m._RentDate = &s
}

// RentDate returns the RentDate value in the mutation.
func (m *RentMutation) RentDate() (r string, exists bool) {
	v := m._RentDate
	if v == nil {
		return
	}
	return *v, true
}

// OldRentDate returns the old RentDate value of the Rent.
// If the Rent object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RentMutation) OldRentDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRentDate is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRentDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRentDate: %w", err)
	}
	return oldValue.RentDate, nil
}

// ResetRentDate reset all changes of the "RentDate" field.
func (m *RentMutation) ResetRentDate() {
	m._RentDate = nil
}

// SetRentRoomID sets the RentRoom edge to Room by id.
func (m *RentMutation) SetRentRoomID(id int) {
	m._RentRoom = &id
}

// ClearRentRoom clears the RentRoom edge to Room.
func (m *RentMutation) ClearRentRoom() {
	m.cleared_RentRoom = true
}

// RentRoomCleared returns if the edge RentRoom was cleared.
func (m *RentMutation) RentRoomCleared() bool {
	return m.cleared_RentRoom
}

// RentRoomID returns the RentRoom id in the mutation.
func (m *RentMutation) RentRoomID() (id int, exists bool) {
	if m._RentRoom != nil {
		return *m._RentRoom, true
	}
	return
}

// RentRoomIDs returns the RentRoom ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RentRoomID instead. It exists only for internal usage by the builders.
func (m *RentMutation) RentRoomIDs() (ids []int) {
	if id := m._RentRoom; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRentRoom reset all changes of the "RentRoom" edge.
func (m *RentMutation) ResetRentRoom() {
	m._RentRoom = nil
	m.cleared_RentRoom = false
}

// SetRentUserID sets the RentUser edge to User by id.
func (m *RentMutation) SetRentUserID(id int) {
	m._RentUser = &id
}

// ClearRentUser clears the RentUser edge to User.
func (m *RentMutation) ClearRentUser() {
	m.cleared_RentUser = true
}

// RentUserCleared returns if the edge RentUser was cleared.
func (m *RentMutation) RentUserCleared() bool {
	return m.cleared_RentUser
}

// RentUserID returns the RentUser id in the mutation.
func (m *RentMutation) RentUserID() (id int, exists bool) {
	if m._RentUser != nil {
		return *m._RentUser, true
	}
	return
}

// RentUserIDs returns the RentUser ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RentUserID instead. It exists only for internal usage by the builders.
func (m *RentMutation) RentUserIDs() (ids []int) {
	if id := m._RentUser; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRentUser reset all changes of the "RentUser" edge.
func (m *RentMutation) ResetRentUser() {
	m._RentUser = nil
	m.cleared_RentUser = false
}

// SetRentInsuranceID sets the RentInsurance edge to Insurance by id.
func (m *RentMutation) SetRentInsuranceID(id int) {
	m._RentInsurance = &id
}

// ClearRentInsurance clears the RentInsurance edge to Insurance.
func (m *RentMutation) ClearRentInsurance() {
	m.cleared_RentInsurance = true
}

// RentInsuranceCleared returns if the edge RentInsurance was cleared.
func (m *RentMutation) RentInsuranceCleared() bool {
	return m.cleared_RentInsurance
}

// RentInsuranceID returns the RentInsurance id in the mutation.
func (m *RentMutation) RentInsuranceID() (id int, exists bool) {
	if m._RentInsurance != nil {
		return *m._RentInsurance, true
	}
	return
}

// RentInsuranceIDs returns the RentInsurance ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RentInsuranceID instead. It exists only for internal usage by the builders.
func (m *RentMutation) RentInsuranceIDs() (ids []int) {
	if id := m._RentInsurance; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRentInsurance reset all changes of the "RentInsurance" edge.
func (m *RentMutation) ResetRentInsurance() {
	m._RentInsurance = nil
	m.cleared_RentInsurance = false
}

// SetRentRoomageID sets the RentRoomage edge to Roomage by id.
func (m *RentMutation) SetRentRoomageID(id int) {
	m._RentRoomage = &id
}

// ClearRentRoomage clears the RentRoomage edge to Roomage.
func (m *RentMutation) ClearRentRoomage() {
	m.cleared_RentRoomage = true
}

// RentRoomageCleared returns if the edge RentRoomage was cleared.
func (m *RentMutation) RentRoomageCleared() bool {
	return m.cleared_RentRoomage
}

// RentRoomageID returns the RentRoomage id in the mutation.
func (m *RentMutation) RentRoomageID() (id int, exists bool) {
	if m._RentRoomage != nil {
		return *m._RentRoomage, true
	}
	return
}

// RentRoomageIDs returns the RentRoomage ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RentRoomageID instead. It exists only for internal usage by the builders.
func (m *RentMutation) RentRoomageIDs() (ids []int) {
	if id := m._RentRoomage; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRentRoomage reset all changes of the "RentRoomage" edge.
func (m *RentMutation) ResetRentRoomage() {
	m._RentRoomage = nil
	m.cleared_RentRoomage = false
}

// Op returns the operation name.
func (m *RentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Rent).
func (m *RentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RentMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._RentAge != nil {
		fields = append(fields, rent.FieldRentAge)
	}
	if m._CidUser != nil {
		fields = append(fields, rent.FieldCidUser)
	}
	if m._RentDate != nil {
		fields = append(fields, rent.FieldRentDate)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rent.FieldRentAge:
		return m.RentAge()
	case rent.FieldCidUser:
		return m.CidUser()
	case rent.FieldRentDate:
		return m.RentDate()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rent.FieldRentAge:
		return m.OldRentAge(ctx)
	case rent.FieldCidUser:
		return m.OldCidUser(ctx)
	case rent.FieldRentDate:
		return m.OldRentDate(ctx)
	}
	return nil, fmt.Errorf("unknown Rent field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rent.FieldRentAge:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRentAge(v)
		return nil
	case rent.FieldCidUser:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCidUser(v)
		return nil
	case rent.FieldRentDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRentDate(v)
		return nil
	}
	return fmt.Errorf("unknown Rent field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RentMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RentMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RentMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rent numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RentMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RentMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rent nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RentMutation) ResetField(name string) error {
	switch name {
	case rent.FieldRentAge:
		m.ResetRentAge()
		return nil
	case rent.FieldCidUser:
		m.ResetCidUser()
		return nil
	case rent.FieldRentDate:
		m.ResetRentDate()
		return nil
	}
	return fmt.Errorf("unknown Rent field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RentMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m._RentRoom != nil {
		edges = append(edges, rent.EdgeRentRoom)
	}
	if m._RentUser != nil {
		edges = append(edges, rent.EdgeRentUser)
	}
	if m._RentInsurance != nil {
		edges = append(edges, rent.EdgeRentInsurance)
	}
	if m._RentRoomage != nil {
		edges = append(edges, rent.EdgeRentRoomage)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rent.EdgeRentRoom:
		if id := m._RentRoom; id != nil {
			return []ent.Value{*id}
		}
	case rent.EdgeRentUser:
		if id := m._RentUser; id != nil {
			return []ent.Value{*id}
		}
	case rent.EdgeRentInsurance:
		if id := m._RentInsurance; id != nil {
			return []ent.Value{*id}
		}
	case rent.EdgeRentRoomage:
		if id := m._RentRoomage; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RentMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleared_RentRoom {
		edges = append(edges, rent.EdgeRentRoom)
	}
	if m.cleared_RentUser {
		edges = append(edges, rent.EdgeRentUser)
	}
	if m.cleared_RentInsurance {
		edges = append(edges, rent.EdgeRentInsurance)
	}
	if m.cleared_RentRoomage {
		edges = append(edges, rent.EdgeRentRoomage)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RentMutation) EdgeCleared(name string) bool {
	switch name {
	case rent.EdgeRentRoom:
		return m.cleared_RentRoom
	case rent.EdgeRentUser:
		return m.cleared_RentUser
	case rent.EdgeRentInsurance:
		return m.cleared_RentInsurance
	case rent.EdgeRentRoomage:
		return m.cleared_RentRoomage
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RentMutation) ClearEdge(name string) error {
	switch name {
	case rent.EdgeRentRoom:
		m.ClearRentRoom()
		return nil
	case rent.EdgeRentUser:
		m.ClearRentUser()
		return nil
	case rent.EdgeRentInsurance:
		m.ClearRentInsurance()
		return nil
	case rent.EdgeRentRoomage:
		m.ClearRentRoomage()
		return nil
	}
	return fmt.Errorf("unknown Rent unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RentMutation) ResetEdge(name string) error {
	switch name {
	case rent.EdgeRentRoom:
		m.ResetRentRoom()
		return nil
	case rent.EdgeRentUser:
		m.ResetRentUser()
		return nil
	case rent.EdgeRentInsurance:
		m.ResetRentInsurance()
		return nil
	case rent.EdgeRentRoomage:
		m.ResetRentRoomage()
		return nil
	}
	return fmt.Errorf("unknown Rent edge %s", name)
}

// RoomMutation represents an operation that mutate the Rooms
// nodes in the graph.
type RoomMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	clearedFields          map[string]struct{}
	_RoomRoomstatus        *int
	cleared_RoomRoomstatus bool
	_RoomRoomtype          *int
	cleared_RoomRoomtype   bool
	_RoomRent              map[int]struct{}
	removed_RoomRent       map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*Room, error)
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows to manage the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for $n.Name.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the id field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoomRoomstatusID sets the RoomRoomstatus edge to RoomStatus by id.
func (m *RoomMutation) SetRoomRoomstatusID(id int) {
	m._RoomRoomstatus = &id
}

// ClearRoomRoomstatus clears the RoomRoomstatus edge to RoomStatus.
func (m *RoomMutation) ClearRoomRoomstatus() {
	m.cleared_RoomRoomstatus = true
}

// RoomRoomstatusCleared returns if the edge RoomRoomstatus was cleared.
func (m *RoomMutation) RoomRoomstatusCleared() bool {
	return m.cleared_RoomRoomstatus
}

// RoomRoomstatusID returns the RoomRoomstatus id in the mutation.
func (m *RoomMutation) RoomRoomstatusID() (id int, exists bool) {
	if m._RoomRoomstatus != nil {
		return *m._RoomRoomstatus, true
	}
	return
}

// RoomRoomstatusIDs returns the RoomRoomstatus ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomRoomstatusID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) RoomRoomstatusIDs() (ids []int) {
	if id := m._RoomRoomstatus; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoomRoomstatus reset all changes of the "RoomRoomstatus" edge.
func (m *RoomMutation) ResetRoomRoomstatus() {
	m._RoomRoomstatus = nil
	m.cleared_RoomRoomstatus = false
}

// SetRoomRoomtypeID sets the RoomRoomtype edge to RoomType by id.
func (m *RoomMutation) SetRoomRoomtypeID(id int) {
	m._RoomRoomtype = &id
}

// ClearRoomRoomtype clears the RoomRoomtype edge to RoomType.
func (m *RoomMutation) ClearRoomRoomtype() {
	m.cleared_RoomRoomtype = true
}

// RoomRoomtypeCleared returns if the edge RoomRoomtype was cleared.
func (m *RoomMutation) RoomRoomtypeCleared() bool {
	return m.cleared_RoomRoomtype
}

// RoomRoomtypeID returns the RoomRoomtype id in the mutation.
func (m *RoomMutation) RoomRoomtypeID() (id int, exists bool) {
	if m._RoomRoomtype != nil {
		return *m._RoomRoomtype, true
	}
	return
}

// RoomRoomtypeIDs returns the RoomRoomtype ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoomRoomtypeID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) RoomRoomtypeIDs() (ids []int) {
	if id := m._RoomRoomtype; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRoomRoomtype reset all changes of the "RoomRoomtype" edge.
func (m *RoomMutation) ResetRoomRoomtype() {
	m._RoomRoomtype = nil
	m.cleared_RoomRoomtype = false
}

// AddRoomRentIDs adds the RoomRent edge to Rent by ids.
func (m *RoomMutation) AddRoomRentIDs(ids ...int) {
	if m._RoomRent == nil {
		m._RoomRent = make(map[int]struct{})
	}
	for i := range ids {
		m._RoomRent[ids[i]] = struct{}{}
	}
}

// RemoveRoomRentIDs removes the RoomRent edge to Rent by ids.
func (m *RoomMutation) RemoveRoomRentIDs(ids ...int) {
	if m.removed_RoomRent == nil {
		m.removed_RoomRent = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_RoomRent[ids[i]] = struct{}{}
	}
}

// RemovedRoomRent returns the removed ids of RoomRent.
func (m *RoomMutation) RemovedRoomRentIDs() (ids []int) {
	for id := range m.removed_RoomRent {
		ids = append(ids, id)
	}
	return
}

// RoomRentIDs returns the RoomRent ids in the mutation.
func (m *RoomMutation) RoomRentIDs() (ids []int) {
	for id := range m._RoomRent {
		ids = append(ids, id)
	}
	return
}

// ResetRoomRent reset all changes of the "RoomRent" edge.
func (m *RoomMutation) ResetRoomRent() {
	m._RoomRent = nil
	m.removed_RoomRent = nil
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._RoomRoomstatus != nil {
		edges = append(edges, room.EdgeRoomRoomstatus)
	}
	if m._RoomRoomtype != nil {
		edges = append(edges, room.EdgeRoomRoomtype)
	}
	if m._RoomRent != nil {
		edges = append(edges, room.EdgeRoomRent)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeRoomRoomstatus:
		if id := m._RoomRoomstatus; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeRoomRoomtype:
		if id := m._RoomRoomtype; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeRoomRent:
		ids := make([]ent.Value, 0, len(m._RoomRent))
		for id := range m._RoomRent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removed_RoomRent != nil {
		edges = append(edges, room.EdgeRoomRent)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeRoomRent:
		ids := make([]ent.Value, 0, len(m.removed_RoomRent))
		for id := range m.removed_RoomRent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_RoomRoomstatus {
		edges = append(edges, room.EdgeRoomRoomstatus)
	}
	if m.cleared_RoomRoomtype {
		edges = append(edges, room.EdgeRoomRoomtype)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeRoomRoomstatus:
		return m.cleared_RoomRoomstatus
	case room.EdgeRoomRoomtype:
		return m.cleared_RoomRoomtype
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeRoomRoomstatus:
		m.ClearRoomRoomstatus()
		return nil
	case room.EdgeRoomRoomtype:
		m.ClearRoomRoomtype()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeRoomRoomstatus:
		m.ResetRoomRoomstatus()
		return nil
	case room.EdgeRoomRoomtype:
		m.ResetRoomRoomtype()
		return nil
	case room.EdgeRoomRent:
		m.ResetRoomRent()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}

// RoomStatusMutation represents an operation that mutate the RoomStatusSlice
// nodes in the graph.
type RoomStatusMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	_RoomStatus            *string
	clearedFields          map[string]struct{}
	_RoomstatusRoom        map[int]struct{}
	removed_RoomstatusRoom map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*RoomStatus, error)
}

var _ ent.Mutation = (*RoomStatusMutation)(nil)

// roomstatusOption allows to manage the mutation configuration using functional options.
type roomstatusOption func(*RoomStatusMutation)

// newRoomStatusMutation creates new mutation for $n.Name.
func newRoomStatusMutation(c config, op Op, opts ...roomstatusOption) *RoomStatusMutation {
	m := &RoomStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomStatusID sets the id field of the mutation.
func withRoomStatusID(id int) roomstatusOption {
	return func(m *RoomStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *RoomStatus
		)
		m.oldValue = func(ctx context.Context) (*RoomStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoomStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomStatus sets the old RoomStatus of the mutation.
func withRoomStatus(node *RoomStatus) roomstatusOption {
	return func(m *RoomStatusMutation) {
		m.oldValue = func(context.Context) (*RoomStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoomStatus sets the RoomStatus field.
func (m *RoomStatusMutation) SetRoomStatus(s string) {
	m._RoomStatus = &s
}

// RoomStatus returns the RoomStatus value in the mutation.
func (m *RoomStatusMutation) RoomStatus() (r string, exists bool) {
	v := m._RoomStatus
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomStatus returns the old RoomStatus value of the RoomStatus.
// If the RoomStatus object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomStatusMutation) OldRoomStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomStatus: %w", err)
	}
	return oldValue.RoomStatus, nil
}

// ResetRoomStatus reset all changes of the "RoomStatus" field.
func (m *RoomStatusMutation) ResetRoomStatus() {
	m._RoomStatus = nil
}

// AddRoomstatusRoomIDs adds the RoomstatusRoom edge to Room by ids.
func (m *RoomStatusMutation) AddRoomstatusRoomIDs(ids ...int) {
	if m._RoomstatusRoom == nil {
		m._RoomstatusRoom = make(map[int]struct{})
	}
	for i := range ids {
		m._RoomstatusRoom[ids[i]] = struct{}{}
	}
}

// RemoveRoomstatusRoomIDs removes the RoomstatusRoom edge to Room by ids.
func (m *RoomStatusMutation) RemoveRoomstatusRoomIDs(ids ...int) {
	if m.removed_RoomstatusRoom == nil {
		m.removed_RoomstatusRoom = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_RoomstatusRoom[ids[i]] = struct{}{}
	}
}

// RemovedRoomstatusRoom returns the removed ids of RoomstatusRoom.
func (m *RoomStatusMutation) RemovedRoomstatusRoomIDs() (ids []int) {
	for id := range m.removed_RoomstatusRoom {
		ids = append(ids, id)
	}
	return
}

// RoomstatusRoomIDs returns the RoomstatusRoom ids in the mutation.
func (m *RoomStatusMutation) RoomstatusRoomIDs() (ids []int) {
	for id := range m._RoomstatusRoom {
		ids = append(ids, id)
	}
	return
}

// ResetRoomstatusRoom reset all changes of the "RoomstatusRoom" edge.
func (m *RoomStatusMutation) ResetRoomstatusRoom() {
	m._RoomstatusRoom = nil
	m.removed_RoomstatusRoom = nil
}

// Op returns the operation name.
func (m *RoomStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RoomStatus).
func (m *RoomStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomStatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._RoomStatus != nil {
		fields = append(fields, roomstatus.FieldRoomStatus)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roomstatus.FieldRoomStatus:
		return m.RoomStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roomstatus.FieldRoomStatus:
		return m.OldRoomStatus(ctx)
	}
	return nil, fmt.Errorf("unknown RoomStatus field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roomstatus.FieldRoomStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomStatus(v)
		return nil
	}
	return fmt.Errorf("unknown RoomStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoomStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomStatusMutation) ResetField(name string) error {
	switch name {
	case roomstatus.FieldRoomStatus:
		m.ResetRoomStatus()
		return nil
	}
	return fmt.Errorf("unknown RoomStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._RoomstatusRoom != nil {
		edges = append(edges, roomstatus.EdgeRoomstatusRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roomstatus.EdgeRoomstatusRoom:
		ids := make([]ent.Value, 0, len(m._RoomstatusRoom))
		for id := range m._RoomstatusRoom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_RoomstatusRoom != nil {
		edges = append(edges, roomstatus.EdgeRoomstatusRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roomstatus.EdgeRoomstatusRoom:
		ids := make([]ent.Value, 0, len(m.removed_RoomstatusRoom))
		for id := range m.removed_RoomstatusRoom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomStatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomStatus unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomStatusMutation) ResetEdge(name string) error {
	switch name {
	case roomstatus.EdgeRoomstatusRoom:
		m.ResetRoomstatusRoom()
		return nil
	}
	return fmt.Errorf("unknown RoomStatus edge %s", name)
}

// RoomTypeMutation represents an operation that mutate the RoomTypes
// nodes in the graph.
type RoomTypeMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	_RoomType            *string
	_COST                *int
	add_COST             *int
	clearedFields        map[string]struct{}
	_RoomtypeRoom        map[int]struct{}
	removed_RoomtypeRoom map[int]struct{}
	done                 bool
	oldValue             func(context.Context) (*RoomType, error)
}

var _ ent.Mutation = (*RoomTypeMutation)(nil)

// roomtypeOption allows to manage the mutation configuration using functional options.
type roomtypeOption func(*RoomTypeMutation)

// newRoomTypeMutation creates new mutation for $n.Name.
func newRoomTypeMutation(c config, op Op, opts ...roomtypeOption) *RoomTypeMutation {
	m := &RoomTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomTypeID sets the id field of the mutation.
func withRoomTypeID(id int) roomtypeOption {
	return func(m *RoomTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *RoomType
		)
		m.oldValue = func(ctx context.Context) (*RoomType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoomType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomType sets the old RoomType of the mutation.
func withRoomType(node *RoomType) roomtypeOption {
	return func(m *RoomTypeMutation) {
		m.oldValue = func(context.Context) (*RoomType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoomType sets the RoomType field.
func (m *RoomTypeMutation) SetRoomType(s string) {
	m._RoomType = &s
}

// RoomType returns the RoomType value in the mutation.
func (m *RoomTypeMutation) RoomType() (r string, exists bool) {
	v := m._RoomType
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomType returns the old RoomType value of the RoomType.
// If the RoomType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomTypeMutation) OldRoomType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomType is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomType: %w", err)
	}
	return oldValue.RoomType, nil
}

// ResetRoomType reset all changes of the "RoomType" field.
func (m *RoomTypeMutation) ResetRoomType() {
	m._RoomType = nil
}

// SetCOST sets the COST field.
func (m *RoomTypeMutation) SetCOST(i int) {
	m._COST = &i
	m.add_COST = nil
}

// COST returns the COST value in the mutation.
func (m *RoomTypeMutation) COST() (r int, exists bool) {
	v := m._COST
	if v == nil {
		return
	}
	return *v, true
}

// OldCOST returns the old COST value of the RoomType.
// If the RoomType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomTypeMutation) OldCOST(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCOST is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCOST requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCOST: %w", err)
	}
	return oldValue.COST, nil
}

// AddCOST adds i to COST.
func (m *RoomTypeMutation) AddCOST(i int) {
	if m.add_COST != nil {
		*m.add_COST += i
	} else {
		m.add_COST = &i
	}
}

// AddedCOST returns the value that was added to the COST field in this mutation.
func (m *RoomTypeMutation) AddedCOST() (r int, exists bool) {
	v := m.add_COST
	if v == nil {
		return
	}
	return *v, true
}

// ResetCOST reset all changes of the "COST" field.
func (m *RoomTypeMutation) ResetCOST() {
	m._COST = nil
	m.add_COST = nil
}

// AddRoomtypeRoomIDs adds the RoomtypeRoom edge to Room by ids.
func (m *RoomTypeMutation) AddRoomtypeRoomIDs(ids ...int) {
	if m._RoomtypeRoom == nil {
		m._RoomtypeRoom = make(map[int]struct{})
	}
	for i := range ids {
		m._RoomtypeRoom[ids[i]] = struct{}{}
	}
}

// RemoveRoomtypeRoomIDs removes the RoomtypeRoom edge to Room by ids.
func (m *RoomTypeMutation) RemoveRoomtypeRoomIDs(ids ...int) {
	if m.removed_RoomtypeRoom == nil {
		m.removed_RoomtypeRoom = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_RoomtypeRoom[ids[i]] = struct{}{}
	}
}

// RemovedRoomtypeRoom returns the removed ids of RoomtypeRoom.
func (m *RoomTypeMutation) RemovedRoomtypeRoomIDs() (ids []int) {
	for id := range m.removed_RoomtypeRoom {
		ids = append(ids, id)
	}
	return
}

// RoomtypeRoomIDs returns the RoomtypeRoom ids in the mutation.
func (m *RoomTypeMutation) RoomtypeRoomIDs() (ids []int) {
	for id := range m._RoomtypeRoom {
		ids = append(ids, id)
	}
	return
}

// ResetRoomtypeRoom reset all changes of the "RoomtypeRoom" edge.
func (m *RoomTypeMutation) ResetRoomtypeRoom() {
	m._RoomtypeRoom = nil
	m.removed_RoomtypeRoom = nil
}

// Op returns the operation name.
func (m *RoomTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RoomType).
func (m *RoomTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomTypeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._RoomType != nil {
		fields = append(fields, roomtype.FieldRoomType)
	}
	if m._COST != nil {
		fields = append(fields, roomtype.FieldCOST)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roomtype.FieldRoomType:
		return m.RoomType()
	case roomtype.FieldCOST:
		return m.COST()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roomtype.FieldRoomType:
		return m.OldRoomType(ctx)
	case roomtype.FieldCOST:
		return m.OldCOST(ctx)
	}
	return nil, fmt.Errorf("unknown RoomType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roomtype.FieldRoomType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomType(v)
		return nil
	case roomtype.FieldCOST:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCOST(v)
		return nil
	}
	return fmt.Errorf("unknown RoomType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomTypeMutation) AddedFields() []string {
	var fields []string
	if m.add_COST != nil {
		fields = append(fields, roomtype.FieldCOST)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roomtype.FieldCOST:
		return m.AddedCOST()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roomtype.FieldCOST:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCOST(v)
		return nil
	}
	return fmt.Errorf("unknown RoomType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoomType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomTypeMutation) ResetField(name string) error {
	switch name {
	case roomtype.FieldRoomType:
		m.ResetRoomType()
		return nil
	case roomtype.FieldCOST:
		m.ResetCOST()
		return nil
	}
	return fmt.Errorf("unknown RoomType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._RoomtypeRoom != nil {
		edges = append(edges, roomtype.EdgeRoomtypeRoom)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roomtype.EdgeRoomtypeRoom:
		ids := make([]ent.Value, 0, len(m._RoomtypeRoom))
		for id := range m._RoomtypeRoom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_RoomtypeRoom != nil {
		edges = append(edges, roomtype.EdgeRoomtypeRoom)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roomtype.EdgeRoomtypeRoom:
		ids := make([]ent.Value, 0, len(m.removed_RoomtypeRoom))
		for id := range m.removed_RoomtypeRoom {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomTypeMutation) ResetEdge(name string) error {
	switch name {
	case roomtype.EdgeRoomtypeRoom:
		m.ResetRoomtypeRoom()
		return nil
	}
	return fmt.Errorf("unknown RoomType edge %s", name)
}

// RoomageMutation represents an operation that mutate the Roomages
// nodes in the graph.
type RoomageMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_RoomAge            *int
	add_RoomAge         *int
	_Text               *string
	clearedFields       map[string]struct{}
	_RoomageRent        map[int]struct{}
	removed_RoomageRent map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Roomage, error)
}

var _ ent.Mutation = (*RoomageMutation)(nil)

// roomageOption allows to manage the mutation configuration using functional options.
type roomageOption func(*RoomageMutation)

// newRoomageMutation creates new mutation for $n.Name.
func newRoomageMutation(c config, op Op, opts ...roomageOption) *RoomageMutation {
	m := &RoomageMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomage,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomageID sets the id field of the mutation.
func withRoomageID(id int) roomageOption {
	return func(m *RoomageMutation) {
		var (
			err   error
			once  sync.Once
			value *Roomage
		)
		m.oldValue = func(ctx context.Context) (*Roomage, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Roomage.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomage sets the old Roomage of the mutation.
func withRoomage(node *Roomage) roomageOption {
	return func(m *RoomageMutation) {
		m.oldValue = func(context.Context) (*Roomage, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomageMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomageMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomageMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRoomAge sets the RoomAge field.
func (m *RoomageMutation) SetRoomAge(i int) {
	m._RoomAge = &i
	m.add_RoomAge = nil
}

// RoomAge returns the RoomAge value in the mutation.
func (m *RoomageMutation) RoomAge() (r int, exists bool) {
	v := m._RoomAge
	if v == nil {
		return
	}
	return *v, true
}

// OldRoomAge returns the old RoomAge value of the Roomage.
// If the Roomage object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomageMutation) OldRoomAge(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRoomAge is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRoomAge requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRoomAge: %w", err)
	}
	return oldValue.RoomAge, nil
}

// AddRoomAge adds i to RoomAge.
func (m *RoomageMutation) AddRoomAge(i int) {
	if m.add_RoomAge != nil {
		*m.add_RoomAge += i
	} else {
		m.add_RoomAge = &i
	}
}

// AddedRoomAge returns the value that was added to the RoomAge field in this mutation.
func (m *RoomageMutation) AddedRoomAge() (r int, exists bool) {
	v := m.add_RoomAge
	if v == nil {
		return
	}
	return *v, true
}

// ResetRoomAge reset all changes of the "RoomAge" field.
func (m *RoomageMutation) ResetRoomAge() {
	m._RoomAge = nil
	m.add_RoomAge = nil
}

// SetText sets the Text field.
func (m *RoomageMutation) SetText(s string) {
	m._Text = &s
}

// Text returns the Text value in the mutation.
func (m *RoomageMutation) Text() (r string, exists bool) {
	v := m._Text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old Text value of the Roomage.
// If the Roomage object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomageMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldText is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText reset all changes of the "Text" field.
func (m *RoomageMutation) ResetText() {
	m._Text = nil
}

// AddRoomageRentIDs adds the RoomageRent edge to Rent by ids.
func (m *RoomageMutation) AddRoomageRentIDs(ids ...int) {
	if m._RoomageRent == nil {
		m._RoomageRent = make(map[int]struct{})
	}
	for i := range ids {
		m._RoomageRent[ids[i]] = struct{}{}
	}
}

// RemoveRoomageRentIDs removes the RoomageRent edge to Rent by ids.
func (m *RoomageMutation) RemoveRoomageRentIDs(ids ...int) {
	if m.removed_RoomageRent == nil {
		m.removed_RoomageRent = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_RoomageRent[ids[i]] = struct{}{}
	}
}

// RemovedRoomageRent returns the removed ids of RoomageRent.
func (m *RoomageMutation) RemovedRoomageRentIDs() (ids []int) {
	for id := range m.removed_RoomageRent {
		ids = append(ids, id)
	}
	return
}

// RoomageRentIDs returns the RoomageRent ids in the mutation.
func (m *RoomageMutation) RoomageRentIDs() (ids []int) {
	for id := range m._RoomageRent {
		ids = append(ids, id)
	}
	return
}

// ResetRoomageRent reset all changes of the "RoomageRent" edge.
func (m *RoomageMutation) ResetRoomageRent() {
	m._RoomageRent = nil
	m.removed_RoomageRent = nil
}

// Op returns the operation name.
func (m *RoomageMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Roomage).
func (m *RoomageMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomageMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._RoomAge != nil {
		fields = append(fields, roomage.FieldRoomAge)
	}
	if m._Text != nil {
		fields = append(fields, roomage.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomageMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roomage.FieldRoomAge:
		return m.RoomAge()
	case roomage.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomageMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roomage.FieldRoomAge:
		return m.OldRoomAge(ctx)
	case roomage.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown Roomage field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomageMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roomage.FieldRoomAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRoomAge(v)
		return nil
	case roomage.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown Roomage field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomageMutation) AddedFields() []string {
	var fields []string
	if m.add_RoomAge != nil {
		fields = append(fields, roomage.FieldRoomAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomageMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roomage.FieldRoomAge:
		return m.AddedRoomAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomageMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roomage.FieldRoomAge:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRoomAge(v)
		return nil
	}
	return fmt.Errorf("unknown Roomage numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomageMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomageMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomageMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Roomage nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomageMutation) ResetField(name string) error {
	switch name {
	case roomage.FieldRoomAge:
		m.ResetRoomAge()
		return nil
	case roomage.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown Roomage field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomageMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._RoomageRent != nil {
		edges = append(edges, roomage.EdgeRoomageRent)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomageMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roomage.EdgeRoomageRent:
		ids := make([]ent.Value, 0, len(m._RoomageRent))
		for id := range m._RoomageRent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomageMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_RoomageRent != nil {
		edges = append(edges, roomage.EdgeRoomageRent)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomageMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roomage.EdgeRoomageRent:
		ids := make([]ent.Value, 0, len(m.removed_RoomageRent))
		for id := range m.removed_RoomageRent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomageMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomageMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomageMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Roomage unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomageMutation) ResetEdge(name string) error {
	switch name {
	case roomage.EdgeRoomageRent:
		m.ResetRoomageRent()
		return nil
	}
	return fmt.Errorf("unknown Roomage edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	_UserEmail             *string
	_NAME                  *string
	clearedFields          map[string]struct{}
	_UserRent              map[int]struct{}
	removed_UserRent       map[int]struct{}
	_UserUserstatus        *int
	cleared_UserUserstatus bool
	done                   bool
	oldValue               func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserEmail sets the UserEmail field.
func (m *UserMutation) SetUserEmail(s string) {
	m._UserEmail = &s
}

// UserEmail returns the UserEmail value in the mutation.
func (m *UserMutation) UserEmail() (r string, exists bool) {
	v := m._UserEmail
	if v == nil {
		return
	}
	return *v, true
}

// OldUserEmail returns the old UserEmail value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUserEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserEmail: %w", err)
	}
	return oldValue.UserEmail, nil
}

// ResetUserEmail reset all changes of the "UserEmail" field.
func (m *UserMutation) ResetUserEmail() {
	m._UserEmail = nil
}

// SetNAME sets the NAME field.
func (m *UserMutation) SetNAME(s string) {
	m._NAME = &s
}

// NAME returns the NAME value in the mutation.
func (m *UserMutation) NAME() (r string, exists bool) {
	v := m._NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldNAME returns the old NAME value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNAME: %w", err)
	}
	return oldValue.NAME, nil
}

// ResetNAME reset all changes of the "NAME" field.
func (m *UserMutation) ResetNAME() {
	m._NAME = nil
}

// AddUserRentIDs adds the UserRent edge to Rent by ids.
func (m *UserMutation) AddUserRentIDs(ids ...int) {
	if m._UserRent == nil {
		m._UserRent = make(map[int]struct{})
	}
	for i := range ids {
		m._UserRent[ids[i]] = struct{}{}
	}
}

// RemoveUserRentIDs removes the UserRent edge to Rent by ids.
func (m *UserMutation) RemoveUserRentIDs(ids ...int) {
	if m.removed_UserRent == nil {
		m.removed_UserRent = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_UserRent[ids[i]] = struct{}{}
	}
}

// RemovedUserRent returns the removed ids of UserRent.
func (m *UserMutation) RemovedUserRentIDs() (ids []int) {
	for id := range m.removed_UserRent {
		ids = append(ids, id)
	}
	return
}

// UserRentIDs returns the UserRent ids in the mutation.
func (m *UserMutation) UserRentIDs() (ids []int) {
	for id := range m._UserRent {
		ids = append(ids, id)
	}
	return
}

// ResetUserRent reset all changes of the "UserRent" edge.
func (m *UserMutation) ResetUserRent() {
	m._UserRent = nil
	m.removed_UserRent = nil
}

// SetUserUserstatusID sets the UserUserstatus edge to UserStatus by id.
func (m *UserMutation) SetUserUserstatusID(id int) {
	m._UserUserstatus = &id
}

// ClearUserUserstatus clears the UserUserstatus edge to UserStatus.
func (m *UserMutation) ClearUserUserstatus() {
	m.cleared_UserUserstatus = true
}

// UserUserstatusCleared returns if the edge UserUserstatus was cleared.
func (m *UserMutation) UserUserstatusCleared() bool {
	return m.cleared_UserUserstatus
}

// UserUserstatusID returns the UserUserstatus id in the mutation.
func (m *UserMutation) UserUserstatusID() (id int, exists bool) {
	if m._UserUserstatus != nil {
		return *m._UserUserstatus, true
	}
	return
}

// UserUserstatusIDs returns the UserUserstatus ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserUserstatusID instead. It exists only for internal usage by the builders.
func (m *UserMutation) UserUserstatusIDs() (ids []int) {
	if id := m._UserUserstatus; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserUserstatus reset all changes of the "UserUserstatus" edge.
func (m *UserMutation) ResetUserUserstatus() {
	m._UserUserstatus = nil
	m.cleared_UserUserstatus = false
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._UserEmail != nil {
		fields = append(fields, user.FieldUserEmail)
	}
	if m._NAME != nil {
		fields = append(fields, user.FieldNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUserEmail:
		return m.UserEmail()
	case user.FieldNAME:
		return m.NAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUserEmail:
		return m.OldUserEmail(ctx)
	case user.FieldNAME:
		return m.OldNAME(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUserEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserEmail(v)
		return nil
	case user.FieldNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNAME(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUserEmail:
		m.ResetUserEmail()
		return nil
	case user.FieldNAME:
		m.ResetNAME()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._UserRent != nil {
		edges = append(edges, user.EdgeUserRent)
	}
	if m._UserUserstatus != nil {
		edges = append(edges, user.EdgeUserUserstatus)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserRent:
		ids := make([]ent.Value, 0, len(m._UserRent))
		for id := range m._UserRent {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUserUserstatus:
		if id := m._UserUserstatus; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_UserRent != nil {
		edges = append(edges, user.EdgeUserRent)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUserRent:
		ids := make([]ent.Value, 0, len(m.removed_UserRent))
		for id := range m.removed_UserRent {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_UserUserstatus {
		edges = append(edges, user.EdgeUserUserstatus)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUserUserstatus:
		return m.cleared_UserUserstatus
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeUserUserstatus:
		m.ClearUserUserstatus()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUserRent:
		m.ResetUserRent()
		return nil
	case user.EdgeUserUserstatus:
		m.ResetUserUserstatus()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserStatusMutation represents an operation that mutate the UserStatusSlice
// nodes in the graph.
type UserStatusMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	_UserStatus            *string
	clearedFields          map[string]struct{}
	_UserstatusUser        map[int]struct{}
	removed_UserstatusUser map[int]struct{}
	done                   bool
	oldValue               func(context.Context) (*UserStatus, error)
}

var _ ent.Mutation = (*UserStatusMutation)(nil)

// userstatusOption allows to manage the mutation configuration using functional options.
type userstatusOption func(*UserStatusMutation)

// newUserStatusMutation creates new mutation for $n.Name.
func newUserStatusMutation(c config, op Op, opts ...userstatusOption) *UserStatusMutation {
	m := &UserStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeUserStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserStatusID sets the id field of the mutation.
func withUserStatusID(id int) userstatusOption {
	return func(m *UserStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *UserStatus
		)
		m.oldValue = func(ctx context.Context) (*UserStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserStatus sets the old UserStatus of the mutation.
func withUserStatus(node *UserStatus) userstatusOption {
	return func(m *UserStatusMutation) {
		m.oldValue = func(context.Context) (*UserStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserStatus sets the UserStatus field.
func (m *UserStatusMutation) SetUserStatus(s string) {
	m._UserStatus = &s
}

// UserStatus returns the UserStatus value in the mutation.
func (m *UserStatusMutation) UserStatus() (r string, exists bool) {
	v := m._UserStatus
	if v == nil {
		return
	}
	return *v, true
}

// OldUserStatus returns the old UserStatus value of the UserStatus.
// If the UserStatus object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserStatusMutation) OldUserStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserStatus is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserStatus: %w", err)
	}
	return oldValue.UserStatus, nil
}

// ResetUserStatus reset all changes of the "UserStatus" field.
func (m *UserStatusMutation) ResetUserStatus() {
	m._UserStatus = nil
}

// AddUserstatusUserIDs adds the UserstatusUser edge to User by ids.
func (m *UserStatusMutation) AddUserstatusUserIDs(ids ...int) {
	if m._UserstatusUser == nil {
		m._UserstatusUser = make(map[int]struct{})
	}
	for i := range ids {
		m._UserstatusUser[ids[i]] = struct{}{}
	}
}

// RemoveUserstatusUserIDs removes the UserstatusUser edge to User by ids.
func (m *UserStatusMutation) RemoveUserstatusUserIDs(ids ...int) {
	if m.removed_UserstatusUser == nil {
		m.removed_UserstatusUser = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_UserstatusUser[ids[i]] = struct{}{}
	}
}

// RemovedUserstatusUser returns the removed ids of UserstatusUser.
func (m *UserStatusMutation) RemovedUserstatusUserIDs() (ids []int) {
	for id := range m.removed_UserstatusUser {
		ids = append(ids, id)
	}
	return
}

// UserstatusUserIDs returns the UserstatusUser ids in the mutation.
func (m *UserStatusMutation) UserstatusUserIDs() (ids []int) {
	for id := range m._UserstatusUser {
		ids = append(ids, id)
	}
	return
}

// ResetUserstatusUser reset all changes of the "UserstatusUser" edge.
func (m *UserStatusMutation) ResetUserstatusUser() {
	m._UserstatusUser = nil
	m.removed_UserstatusUser = nil
}

// Op returns the operation name.
func (m *UserStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserStatus).
func (m *UserStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserStatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._UserStatus != nil {
		fields = append(fields, userstatus.FieldUserStatus)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userstatus.FieldUserStatus:
		return m.UserStatus()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userstatus.FieldUserStatus:
		return m.OldUserStatus(ctx)
	}
	return nil, fmt.Errorf("unknown UserStatus field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userstatus.FieldUserStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserStatus(v)
		return nil
	}
	return fmt.Errorf("unknown UserStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserStatusMutation) ResetField(name string) error {
	switch name {
	case userstatus.FieldUserStatus:
		m.ResetUserStatus()
		return nil
	}
	return fmt.Errorf("unknown UserStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._UserstatusUser != nil {
		edges = append(edges, userstatus.EdgeUserstatusUser)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userstatus.EdgeUserstatusUser:
		ids := make([]ent.Value, 0, len(m._UserstatusUser))
		for id := range m._UserstatusUser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_UserstatusUser != nil {
		edges = append(edges, userstatus.EdgeUserstatusUser)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case userstatus.EdgeUserstatusUser:
		ids := make([]ent.Value, 0, len(m.removed_UserstatusUser))
		for id := range m.removed_UserstatusUser {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserStatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown UserStatus unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserStatusMutation) ResetEdge(name string) error {
	switch name {
	case userstatus.EdgeUserstatusUser:
		m.ResetUserstatusUser()
		return nil
	}
	return fmt.Errorf("unknown UserStatus edge %s", name)
}
