// Code generated by entc, DO NOT EDIT.

package rent

import (
	"github.com/PON/app/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RentAge applies equality check predicate on the "RentAge" field. It's identical to RentAgeEQ.
func RentAge(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRentAge), v))
	})
}

// CidUser applies equality check predicate on the "CidUser" field. It's identical to CidUserEQ.
func CidUser(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCidUser), v))
	})
}

// RentDate applies equality check predicate on the "RentDate" field. It's identical to RentDateEQ.
func RentDate(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRentDate), v))
	})
}

// RentAgeEQ applies the EQ predicate on the "RentAge" field.
func RentAgeEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRentAge), v))
	})
}

// RentAgeNEQ applies the NEQ predicate on the "RentAge" field.
func RentAgeNEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRentAge), v))
	})
}

// RentAgeIn applies the In predicate on the "RentAge" field.
func RentAgeIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRentAge), v...))
	})
}

// RentAgeNotIn applies the NotIn predicate on the "RentAge" field.
func RentAgeNotIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRentAge), v...))
	})
}

// RentAgeGT applies the GT predicate on the "RentAge" field.
func RentAgeGT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRentAge), v))
	})
}

// RentAgeGTE applies the GTE predicate on the "RentAge" field.
func RentAgeGTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRentAge), v))
	})
}

// RentAgeLT applies the LT predicate on the "RentAge" field.
func RentAgeLT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRentAge), v))
	})
}

// RentAgeLTE applies the LTE predicate on the "RentAge" field.
func RentAgeLTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRentAge), v))
	})
}

// RentAgeContains applies the Contains predicate on the "RentAge" field.
func RentAgeContains(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRentAge), v))
	})
}

// RentAgeHasPrefix applies the HasPrefix predicate on the "RentAge" field.
func RentAgeHasPrefix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRentAge), v))
	})
}

// RentAgeHasSuffix applies the HasSuffix predicate on the "RentAge" field.
func RentAgeHasSuffix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRentAge), v))
	})
}

// RentAgeEqualFold applies the EqualFold predicate on the "RentAge" field.
func RentAgeEqualFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRentAge), v))
	})
}

// RentAgeContainsFold applies the ContainsFold predicate on the "RentAge" field.
func RentAgeContainsFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRentAge), v))
	})
}

// CidUserEQ applies the EQ predicate on the "CidUser" field.
func CidUserEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCidUser), v))
	})
}

// CidUserNEQ applies the NEQ predicate on the "CidUser" field.
func CidUserNEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCidUser), v))
	})
}

// CidUserIn applies the In predicate on the "CidUser" field.
func CidUserIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCidUser), v...))
	})
}

// CidUserNotIn applies the NotIn predicate on the "CidUser" field.
func CidUserNotIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCidUser), v...))
	})
}

// CidUserGT applies the GT predicate on the "CidUser" field.
func CidUserGT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCidUser), v))
	})
}

// CidUserGTE applies the GTE predicate on the "CidUser" field.
func CidUserGTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCidUser), v))
	})
}

// CidUserLT applies the LT predicate on the "CidUser" field.
func CidUserLT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCidUser), v))
	})
}

// CidUserLTE applies the LTE predicate on the "CidUser" field.
func CidUserLTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCidUser), v))
	})
}

// CidUserContains applies the Contains predicate on the "CidUser" field.
func CidUserContains(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCidUser), v))
	})
}

// CidUserHasPrefix applies the HasPrefix predicate on the "CidUser" field.
func CidUserHasPrefix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCidUser), v))
	})
}

// CidUserHasSuffix applies the HasSuffix predicate on the "CidUser" field.
func CidUserHasSuffix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCidUser), v))
	})
}

// CidUserEqualFold applies the EqualFold predicate on the "CidUser" field.
func CidUserEqualFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCidUser), v))
	})
}

// CidUserContainsFold applies the ContainsFold predicate on the "CidUser" field.
func CidUserContainsFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCidUser), v))
	})
}

// RentDateEQ applies the EQ predicate on the "RentDate" field.
func RentDateEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRentDate), v))
	})
}

// RentDateNEQ applies the NEQ predicate on the "RentDate" field.
func RentDateNEQ(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRentDate), v))
	})
}

// RentDateIn applies the In predicate on the "RentDate" field.
func RentDateIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRentDate), v...))
	})
}

// RentDateNotIn applies the NotIn predicate on the "RentDate" field.
func RentDateNotIn(vs ...string) predicate.Rent {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rent(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRentDate), v...))
	})
}

// RentDateGT applies the GT predicate on the "RentDate" field.
func RentDateGT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRentDate), v))
	})
}

// RentDateGTE applies the GTE predicate on the "RentDate" field.
func RentDateGTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRentDate), v))
	})
}

// RentDateLT applies the LT predicate on the "RentDate" field.
func RentDateLT(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRentDate), v))
	})
}

// RentDateLTE applies the LTE predicate on the "RentDate" field.
func RentDateLTE(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRentDate), v))
	})
}

// RentDateContains applies the Contains predicate on the "RentDate" field.
func RentDateContains(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRentDate), v))
	})
}

// RentDateHasPrefix applies the HasPrefix predicate on the "RentDate" field.
func RentDateHasPrefix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRentDate), v))
	})
}

// RentDateHasSuffix applies the HasSuffix predicate on the "RentDate" field.
func RentDateHasSuffix(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRentDate), v))
	})
}

// RentDateEqualFold applies the EqualFold predicate on the "RentDate" field.
func RentDateEqualFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRentDate), v))
	})
}

// RentDateContainsFold applies the ContainsFold predicate on the "RentDate" field.
func RentDateContainsFold(v string) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRentDate), v))
	})
}

// HasRentRoom applies the HasEdge predicate on the "RentRoom" edge.
func HasRentRoom() predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RentRoomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RentRoomTable, RentRoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRentRoomWith applies the HasEdge predicate on the "RentRoom" edge with a given conditions (other predicates).
func HasRentRoomWith(preds ...predicate.Room) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RentRoomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RentRoomTable, RentRoomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRentUser applies the HasEdge predicate on the "RentUser" edge.
func HasRentUser() predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RentUserTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RentUserTable, RentUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRentUserWith applies the HasEdge predicate on the "RentUser" edge with a given conditions (other predicates).
func HasRentUserWith(preds ...predicate.User) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RentUserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RentUserTable, RentUserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRentInsurance applies the HasEdge predicate on the "RentInsurance" edge.
func HasRentInsurance() predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RentInsuranceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RentInsuranceTable, RentInsuranceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRentInsuranceWith applies the HasEdge predicate on the "RentInsurance" edge with a given conditions (other predicates).
func HasRentInsuranceWith(preds ...predicate.Insurance) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RentInsuranceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RentInsuranceTable, RentInsuranceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRentRoomage applies the HasEdge predicate on the "RentRoomage" edge.
func HasRentRoomage() predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RentRoomageTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RentRoomageTable, RentRoomageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRentRoomageWith applies the HasEdge predicate on the "RentRoomage" edge with a given conditions (other predicates).
func HasRentRoomageWith(preds ...predicate.Roomage) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RentRoomageInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RentRoomageTable, RentRoomageColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Rent) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Rent) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rent) predicate.Rent {
	return predicate.Rent(func(s *sql.Selector) {
		p(s.Not())
	})
}
