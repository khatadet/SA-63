// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/predicate"
	"github.com/PON/app/ent/rent"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// InsuranceUpdate is the builder for updating Insurance entities.
type InsuranceUpdate struct {
	config
	hooks      []Hook
	mutation   *InsuranceMutation
	predicates []predicate.Insurance
}

// Where adds a new predicate for the builder.
func (iu *InsuranceUpdate) Where(ps ...predicate.Insurance) *InsuranceUpdate {
	iu.predicates = append(iu.predicates, ps...)
	return iu
}

// SetInsurance sets the Insurance field.
func (iu *InsuranceUpdate) SetInsurance(i int) *InsuranceUpdate {
	iu.mutation.ResetInsurance()
	iu.mutation.SetInsurance(i)
	return iu
}

// AddInsurance adds i to Insurance.
func (iu *InsuranceUpdate) AddInsurance(i int) *InsuranceUpdate {
	iu.mutation.AddInsurance(i)
	return iu
}

// AddInsuranceRentIDs adds the InsuranceRent edge to Rent by ids.
func (iu *InsuranceUpdate) AddInsuranceRentIDs(ids ...int) *InsuranceUpdate {
	iu.mutation.AddInsuranceRentIDs(ids...)
	return iu
}

// AddInsuranceRent adds the InsuranceRent edges to Rent.
func (iu *InsuranceUpdate) AddInsuranceRent(r ...*Rent) *InsuranceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iu.AddInsuranceRentIDs(ids...)
}

// Mutation returns the InsuranceMutation object of the builder.
func (iu *InsuranceUpdate) Mutation() *InsuranceMutation {
	return iu.mutation
}

// RemoveInsuranceRentIDs removes the InsuranceRent edge to Rent by ids.
func (iu *InsuranceUpdate) RemoveInsuranceRentIDs(ids ...int) *InsuranceUpdate {
	iu.mutation.RemoveInsuranceRentIDs(ids...)
	return iu
}

// RemoveInsuranceRent removes InsuranceRent edges to Rent.
func (iu *InsuranceUpdate) RemoveInsuranceRent(r ...*Rent) *InsuranceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iu.RemoveInsuranceRentIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iu *InsuranceUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InsuranceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InsuranceUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InsuranceUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InsuranceUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InsuranceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   insurance.Table,
			Columns: insurance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: insurance.FieldID,
			},
		},
	}
	if ps := iu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Insurance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: insurance.FieldInsurance,
		})
	}
	if value, ok := iu.mutation.AddedInsurance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: insurance.FieldInsurance,
		})
	}
	if nodes := iu.mutation.RemovedInsuranceRentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insurance.InsuranceRentTable,
			Columns: []string{insurance.InsuranceRentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.InsuranceRentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insurance.InsuranceRentTable,
			Columns: []string{insurance.InsuranceRentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{insurance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InsuranceUpdateOne is the builder for updating a single Insurance entity.
type InsuranceUpdateOne struct {
	config
	hooks    []Hook
	mutation *InsuranceMutation
}

// SetInsurance sets the Insurance field.
func (iuo *InsuranceUpdateOne) SetInsurance(i int) *InsuranceUpdateOne {
	iuo.mutation.ResetInsurance()
	iuo.mutation.SetInsurance(i)
	return iuo
}

// AddInsurance adds i to Insurance.
func (iuo *InsuranceUpdateOne) AddInsurance(i int) *InsuranceUpdateOne {
	iuo.mutation.AddInsurance(i)
	return iuo
}

// AddInsuranceRentIDs adds the InsuranceRent edge to Rent by ids.
func (iuo *InsuranceUpdateOne) AddInsuranceRentIDs(ids ...int) *InsuranceUpdateOne {
	iuo.mutation.AddInsuranceRentIDs(ids...)
	return iuo
}

// AddInsuranceRent adds the InsuranceRent edges to Rent.
func (iuo *InsuranceUpdateOne) AddInsuranceRent(r ...*Rent) *InsuranceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iuo.AddInsuranceRentIDs(ids...)
}

// Mutation returns the InsuranceMutation object of the builder.
func (iuo *InsuranceUpdateOne) Mutation() *InsuranceMutation {
	return iuo.mutation
}

// RemoveInsuranceRentIDs removes the InsuranceRent edge to Rent by ids.
func (iuo *InsuranceUpdateOne) RemoveInsuranceRentIDs(ids ...int) *InsuranceUpdateOne {
	iuo.mutation.RemoveInsuranceRentIDs(ids...)
	return iuo
}

// RemoveInsuranceRent removes InsuranceRent edges to Rent.
func (iuo *InsuranceUpdateOne) RemoveInsuranceRent(r ...*Rent) *InsuranceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return iuo.RemoveInsuranceRentIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (iuo *InsuranceUpdateOne) Save(ctx context.Context) (*Insurance, error) {

	var (
		err  error
		node *Insurance
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InsuranceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InsuranceUpdateOne) SaveX(ctx context.Context) *Insurance {
	i, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return i
}

// Exec executes the query on the entity.
func (iuo *InsuranceUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InsuranceUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InsuranceUpdateOne) sqlSave(ctx context.Context) (i *Insurance, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   insurance.Table,
			Columns: insurance.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: insurance.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Insurance.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := iuo.mutation.Insurance(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: insurance.FieldInsurance,
		})
	}
	if value, ok := iuo.mutation.AddedInsurance(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: insurance.FieldInsurance,
		})
	}
	if nodes := iuo.mutation.RemovedInsuranceRentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insurance.InsuranceRentTable,
			Columns: []string{insurance.InsuranceRentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.InsuranceRentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   insurance.InsuranceRentTable,
			Columns: []string{insurance.InsuranceRentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	i = &Insurance{config: iuo.config}
	_spec.Assign = i.assignValues
	_spec.ScanValues = i.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{insurance.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return i, nil
}
