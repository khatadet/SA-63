// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/predicate"
	"github.com/PON/app/ent/rent"
	"github.com/PON/app/ent/room"
	"github.com/PON/app/ent/roomage"
	"github.com/PON/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RentUpdate is the builder for updating Rent entities.
type RentUpdate struct {
	config
	hooks      []Hook
	mutation   *RentMutation
	predicates []predicate.Rent
}

// Where adds a new predicate for the builder.
func (ru *RentUpdate) Where(ps ...predicate.Rent) *RentUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetRentAge sets the RentAge field.
func (ru *RentUpdate) SetRentAge(s string) *RentUpdate {
	ru.mutation.SetRentAge(s)
	return ru
}

// SetCidUser sets the CidUser field.
func (ru *RentUpdate) SetCidUser(s string) *RentUpdate {
	ru.mutation.SetCidUser(s)
	return ru
}

// SetRentDate sets the RentDate field.
func (ru *RentUpdate) SetRentDate(s string) *RentUpdate {
	ru.mutation.SetRentDate(s)
	return ru
}

// SetRentRoomID sets the RentRoom edge to Room by id.
func (ru *RentUpdate) SetRentRoomID(id int) *RentUpdate {
	ru.mutation.SetRentRoomID(id)
	return ru
}

// SetNillableRentRoomID sets the RentRoom edge to Room by id if the given value is not nil.
func (ru *RentUpdate) SetNillableRentRoomID(id *int) *RentUpdate {
	if id != nil {
		ru = ru.SetRentRoomID(*id)
	}
	return ru
}

// SetRentRoom sets the RentRoom edge to Room.
func (ru *RentUpdate) SetRentRoom(r *Room) *RentUpdate {
	return ru.SetRentRoomID(r.ID)
}

// SetRentUserID sets the RentUser edge to User by id.
func (ru *RentUpdate) SetRentUserID(id int) *RentUpdate {
	ru.mutation.SetRentUserID(id)
	return ru
}

// SetNillableRentUserID sets the RentUser edge to User by id if the given value is not nil.
func (ru *RentUpdate) SetNillableRentUserID(id *int) *RentUpdate {
	if id != nil {
		ru = ru.SetRentUserID(*id)
	}
	return ru
}

// SetRentUser sets the RentUser edge to User.
func (ru *RentUpdate) SetRentUser(u *User) *RentUpdate {
	return ru.SetRentUserID(u.ID)
}

// SetRentInsuranceID sets the RentInsurance edge to Insurance by id.
func (ru *RentUpdate) SetRentInsuranceID(id int) *RentUpdate {
	ru.mutation.SetRentInsuranceID(id)
	return ru
}

// SetNillableRentInsuranceID sets the RentInsurance edge to Insurance by id if the given value is not nil.
func (ru *RentUpdate) SetNillableRentInsuranceID(id *int) *RentUpdate {
	if id != nil {
		ru = ru.SetRentInsuranceID(*id)
	}
	return ru
}

// SetRentInsurance sets the RentInsurance edge to Insurance.
func (ru *RentUpdate) SetRentInsurance(i *Insurance) *RentUpdate {
	return ru.SetRentInsuranceID(i.ID)
}

// SetRentRoomageID sets the RentRoomage edge to Roomage by id.
func (ru *RentUpdate) SetRentRoomageID(id int) *RentUpdate {
	ru.mutation.SetRentRoomageID(id)
	return ru
}

// SetNillableRentRoomageID sets the RentRoomage edge to Roomage by id if the given value is not nil.
func (ru *RentUpdate) SetNillableRentRoomageID(id *int) *RentUpdate {
	if id != nil {
		ru = ru.SetRentRoomageID(*id)
	}
	return ru
}

// SetRentRoomage sets the RentRoomage edge to Roomage.
func (ru *RentUpdate) SetRentRoomage(r *Roomage) *RentUpdate {
	return ru.SetRentRoomageID(r.ID)
}

// Mutation returns the RentMutation object of the builder.
func (ru *RentUpdate) Mutation() *RentMutation {
	return ru.mutation
}

// ClearRentRoom clears the RentRoom edge to Room.
func (ru *RentUpdate) ClearRentRoom() *RentUpdate {
	ru.mutation.ClearRentRoom()
	return ru
}

// ClearRentUser clears the RentUser edge to User.
func (ru *RentUpdate) ClearRentUser() *RentUpdate {
	ru.mutation.ClearRentUser()
	return ru
}

// ClearRentInsurance clears the RentInsurance edge to Insurance.
func (ru *RentUpdate) ClearRentInsurance() *RentUpdate {
	ru.mutation.ClearRentInsurance()
	return ru
}

// ClearRentRoomage clears the RentRoomage edge to Roomage.
func (ru *RentUpdate) ClearRentRoomage() *RentUpdate {
	ru.mutation.ClearRentRoomage()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RentUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RentUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RentUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RentUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rent.Table,
			Columns: rent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rent.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.RentAge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rent.FieldRentAge,
		})
	}
	if value, ok := ru.mutation.CidUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rent.FieldCidUser,
		})
	}
	if value, ok := ru.mutation.RentDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rent.FieldRentDate,
		})
	}
	if ru.mutation.RentRoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomTable,
			Columns: []string{rent.RentRoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RentRoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomTable,
			Columns: []string{rent.RentRoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RentUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentUserTable,
			Columns: []string{rent.RentUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RentUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentUserTable,
			Columns: []string{rent.RentUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RentInsuranceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentInsuranceTable,
			Columns: []string{rent.RentInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RentInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentInsuranceTable,
			Columns: []string{rent.RentInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RentRoomageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomageTable,
			Columns: []string{rent.RentRoomageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RentRoomageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomageTable,
			Columns: []string{rent.RentRoomageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RentUpdateOne is the builder for updating a single Rent entity.
type RentUpdateOne struct {
	config
	hooks    []Hook
	mutation *RentMutation
}

// SetRentAge sets the RentAge field.
func (ruo *RentUpdateOne) SetRentAge(s string) *RentUpdateOne {
	ruo.mutation.SetRentAge(s)
	return ruo
}

// SetCidUser sets the CidUser field.
func (ruo *RentUpdateOne) SetCidUser(s string) *RentUpdateOne {
	ruo.mutation.SetCidUser(s)
	return ruo
}

// SetRentDate sets the RentDate field.
func (ruo *RentUpdateOne) SetRentDate(s string) *RentUpdateOne {
	ruo.mutation.SetRentDate(s)
	return ruo
}

// SetRentRoomID sets the RentRoom edge to Room by id.
func (ruo *RentUpdateOne) SetRentRoomID(id int) *RentUpdateOne {
	ruo.mutation.SetRentRoomID(id)
	return ruo
}

// SetNillableRentRoomID sets the RentRoom edge to Room by id if the given value is not nil.
func (ruo *RentUpdateOne) SetNillableRentRoomID(id *int) *RentUpdateOne {
	if id != nil {
		ruo = ruo.SetRentRoomID(*id)
	}
	return ruo
}

// SetRentRoom sets the RentRoom edge to Room.
func (ruo *RentUpdateOne) SetRentRoom(r *Room) *RentUpdateOne {
	return ruo.SetRentRoomID(r.ID)
}

// SetRentUserID sets the RentUser edge to User by id.
func (ruo *RentUpdateOne) SetRentUserID(id int) *RentUpdateOne {
	ruo.mutation.SetRentUserID(id)
	return ruo
}

// SetNillableRentUserID sets the RentUser edge to User by id if the given value is not nil.
func (ruo *RentUpdateOne) SetNillableRentUserID(id *int) *RentUpdateOne {
	if id != nil {
		ruo = ruo.SetRentUserID(*id)
	}
	return ruo
}

// SetRentUser sets the RentUser edge to User.
func (ruo *RentUpdateOne) SetRentUser(u *User) *RentUpdateOne {
	return ruo.SetRentUserID(u.ID)
}

// SetRentInsuranceID sets the RentInsurance edge to Insurance by id.
func (ruo *RentUpdateOne) SetRentInsuranceID(id int) *RentUpdateOne {
	ruo.mutation.SetRentInsuranceID(id)
	return ruo
}

// SetNillableRentInsuranceID sets the RentInsurance edge to Insurance by id if the given value is not nil.
func (ruo *RentUpdateOne) SetNillableRentInsuranceID(id *int) *RentUpdateOne {
	if id != nil {
		ruo = ruo.SetRentInsuranceID(*id)
	}
	return ruo
}

// SetRentInsurance sets the RentInsurance edge to Insurance.
func (ruo *RentUpdateOne) SetRentInsurance(i *Insurance) *RentUpdateOne {
	return ruo.SetRentInsuranceID(i.ID)
}

// SetRentRoomageID sets the RentRoomage edge to Roomage by id.
func (ruo *RentUpdateOne) SetRentRoomageID(id int) *RentUpdateOne {
	ruo.mutation.SetRentRoomageID(id)
	return ruo
}

// SetNillableRentRoomageID sets the RentRoomage edge to Roomage by id if the given value is not nil.
func (ruo *RentUpdateOne) SetNillableRentRoomageID(id *int) *RentUpdateOne {
	if id != nil {
		ruo = ruo.SetRentRoomageID(*id)
	}
	return ruo
}

// SetRentRoomage sets the RentRoomage edge to Roomage.
func (ruo *RentUpdateOne) SetRentRoomage(r *Roomage) *RentUpdateOne {
	return ruo.SetRentRoomageID(r.ID)
}

// Mutation returns the RentMutation object of the builder.
func (ruo *RentUpdateOne) Mutation() *RentMutation {
	return ruo.mutation
}

// ClearRentRoom clears the RentRoom edge to Room.
func (ruo *RentUpdateOne) ClearRentRoom() *RentUpdateOne {
	ruo.mutation.ClearRentRoom()
	return ruo
}

// ClearRentUser clears the RentUser edge to User.
func (ruo *RentUpdateOne) ClearRentUser() *RentUpdateOne {
	ruo.mutation.ClearRentUser()
	return ruo
}

// ClearRentInsurance clears the RentInsurance edge to Insurance.
func (ruo *RentUpdateOne) ClearRentInsurance() *RentUpdateOne {
	ruo.mutation.ClearRentInsurance()
	return ruo
}

// ClearRentRoomage clears the RentRoomage edge to Roomage.
func (ruo *RentUpdateOne) ClearRentRoomage() *RentUpdateOne {
	ruo.mutation.ClearRentRoomage()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RentUpdateOne) Save(ctx context.Context) (*Rent, error) {

	var (
		err  error
		node *Rent
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RentUpdateOne) SaveX(ctx context.Context) *Rent {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RentUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RentUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RentUpdateOne) sqlSave(ctx context.Context) (r *Rent, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rent.Table,
			Columns: rent.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rent.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Rent.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.RentAge(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rent.FieldRentAge,
		})
	}
	if value, ok := ruo.mutation.CidUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rent.FieldCidUser,
		})
	}
	if value, ok := ruo.mutation.RentDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rent.FieldRentDate,
		})
	}
	if ruo.mutation.RentRoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomTable,
			Columns: []string{rent.RentRoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RentRoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomTable,
			Columns: []string{rent.RentRoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RentUserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentUserTable,
			Columns: []string{rent.RentUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RentUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentUserTable,
			Columns: []string{rent.RentUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RentInsuranceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentInsuranceTable,
			Columns: []string{rent.RentInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RentInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentInsuranceTable,
			Columns: []string{rent.RentInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RentRoomageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomageTable,
			Columns: []string{rent.RentRoomageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RentRoomageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomageTable,
			Columns: []string{rent.RentRoomageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Rent{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rent.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
