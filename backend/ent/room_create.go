// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/PON/app/ent/rent"
	"github.com/PON/app/ent/room"
	"github.com/PON/app/ent/roomstatus"
	"github.com/PON/app/ent/roomtype"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RoomCreate is the builder for creating a Room entity.
type RoomCreate struct {
	config
	mutation *RoomMutation
	hooks    []Hook
}

// SetRoomName sets the RoomName field.
func (rc *RoomCreate) SetRoomName(s string) *RoomCreate {
	rc.mutation.SetRoomName(s)
	return rc
}

// SetRoomRoomstatusID sets the RoomRoomstatus edge to RoomStatus by id.
func (rc *RoomCreate) SetRoomRoomstatusID(id int) *RoomCreate {
	rc.mutation.SetRoomRoomstatusID(id)
	return rc
}

// SetNillableRoomRoomstatusID sets the RoomRoomstatus edge to RoomStatus by id if the given value is not nil.
func (rc *RoomCreate) SetNillableRoomRoomstatusID(id *int) *RoomCreate {
	if id != nil {
		rc = rc.SetRoomRoomstatusID(*id)
	}
	return rc
}

// SetRoomRoomstatus sets the RoomRoomstatus edge to RoomStatus.
func (rc *RoomCreate) SetRoomRoomstatus(r *RoomStatus) *RoomCreate {
	return rc.SetRoomRoomstatusID(r.ID)
}

// SetRoomRoomtypeID sets the RoomRoomtype edge to RoomType by id.
func (rc *RoomCreate) SetRoomRoomtypeID(id int) *RoomCreate {
	rc.mutation.SetRoomRoomtypeID(id)
	return rc
}

// SetNillableRoomRoomtypeID sets the RoomRoomtype edge to RoomType by id if the given value is not nil.
func (rc *RoomCreate) SetNillableRoomRoomtypeID(id *int) *RoomCreate {
	if id != nil {
		rc = rc.SetRoomRoomtypeID(*id)
	}
	return rc
}

// SetRoomRoomtype sets the RoomRoomtype edge to RoomType.
func (rc *RoomCreate) SetRoomRoomtype(r *RoomType) *RoomCreate {
	return rc.SetRoomRoomtypeID(r.ID)
}

// AddRoomRentIDs adds the RoomRent edge to Rent by ids.
func (rc *RoomCreate) AddRoomRentIDs(ids ...int) *RoomCreate {
	rc.mutation.AddRoomRentIDs(ids...)
	return rc
}

// AddRoomRent adds the RoomRent edges to Rent.
func (rc *RoomCreate) AddRoomRent(r ...*Rent) *RoomCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return rc.AddRoomRentIDs(ids...)
}

// Mutation returns the RoomMutation object of the builder.
func (rc *RoomCreate) Mutation() *RoomMutation {
	return rc.mutation
}

// Save creates the Room in the database.
func (rc *RoomCreate) Save(ctx context.Context) (*Room, error) {
	if _, ok := rc.mutation.RoomName(); !ok {
		return nil, &ValidationError{Name: "RoomName", err: errors.New("ent: missing required field \"RoomName\"")}
	}
	var (
		err  error
		node *Room
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RoomCreate) SaveX(ctx context.Context) *Room {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RoomCreate) sqlSave(ctx context.Context) (*Room, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RoomCreate) createSpec() (*Room, *sqlgraph.CreateSpec) {
	var (
		r     = &Room{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: room.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: room.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.RoomName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: room.FieldRoomName,
		})
		r.RoomName = value
	}
	if nodes := rc.mutation.RoomRoomstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.RoomRoomstatusTable,
			Columns: []string{room.RoomRoomstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RoomRoomtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.RoomRoomtypeTable,
			Columns: []string{room.RoomRoomtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RoomRentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.RoomRentTable,
			Columns: []string{room.RoomRentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
