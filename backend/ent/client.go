// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/PON/app/ent/migrate"

	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/rent"
	"github.com/PON/app/ent/room"
	"github.com/PON/app/ent/roomage"
	"github.com/PON/app/ent/roomstatus"
	"github.com/PON/app/ent/roomtype"
	"github.com/PON/app/ent/user"
	"github.com/PON/app/ent/userstatus"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Insurance is the client for interacting with the Insurance builders.
	Insurance *InsuranceClient
	// Rent is the client for interacting with the Rent builders.
	Rent *RentClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// RoomStatus is the client for interacting with the RoomStatus builders.
	RoomStatus *RoomStatusClient
	// RoomType is the client for interacting with the RoomType builders.
	RoomType *RoomTypeClient
	// Roomage is the client for interacting with the Roomage builders.
	Roomage *RoomageClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserStatus is the client for interacting with the UserStatus builders.
	UserStatus *UserStatusClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Insurance = NewInsuranceClient(c.config)
	c.Rent = NewRentClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.RoomStatus = NewRoomStatusClient(c.config)
	c.RoomType = NewRoomTypeClient(c.config)
	c.Roomage = NewRoomageClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserStatus = NewUserStatusClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Insurance:  NewInsuranceClient(cfg),
		Rent:       NewRentClient(cfg),
		Room:       NewRoomClient(cfg),
		RoomStatus: NewRoomStatusClient(cfg),
		RoomType:   NewRoomTypeClient(cfg),
		Roomage:    NewRoomageClient(cfg),
		User:       NewUserClient(cfg),
		UserStatus: NewUserStatusClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:     cfg,
		Insurance:  NewInsuranceClient(cfg),
		Rent:       NewRentClient(cfg),
		Room:       NewRoomClient(cfg),
		RoomStatus: NewRoomStatusClient(cfg),
		RoomType:   NewRoomTypeClient(cfg),
		Roomage:    NewRoomageClient(cfg),
		User:       NewUserClient(cfg),
		UserStatus: NewUserStatusClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Insurance.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Insurance.Use(hooks...)
	c.Rent.Use(hooks...)
	c.Room.Use(hooks...)
	c.RoomStatus.Use(hooks...)
	c.RoomType.Use(hooks...)
	c.Roomage.Use(hooks...)
	c.User.Use(hooks...)
	c.UserStatus.Use(hooks...)
}

// InsuranceClient is a client for the Insurance schema.
type InsuranceClient struct {
	config
}

// NewInsuranceClient returns a client for the Insurance from the given config.
func NewInsuranceClient(c config) *InsuranceClient {
	return &InsuranceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `insurance.Hooks(f(g(h())))`.
func (c *InsuranceClient) Use(hooks ...Hook) {
	c.hooks.Insurance = append(c.hooks.Insurance, hooks...)
}

// Create returns a create builder for Insurance.
func (c *InsuranceClient) Create() *InsuranceCreate {
	mutation := newInsuranceMutation(c.config, OpCreate)
	return &InsuranceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Insurance.
func (c *InsuranceClient) Update() *InsuranceUpdate {
	mutation := newInsuranceMutation(c.config, OpUpdate)
	return &InsuranceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InsuranceClient) UpdateOne(i *Insurance) *InsuranceUpdateOne {
	mutation := newInsuranceMutation(c.config, OpUpdateOne, withInsurance(i))
	return &InsuranceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InsuranceClient) UpdateOneID(id int) *InsuranceUpdateOne {
	mutation := newInsuranceMutation(c.config, OpUpdateOne, withInsuranceID(id))
	return &InsuranceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Insurance.
func (c *InsuranceClient) Delete() *InsuranceDelete {
	mutation := newInsuranceMutation(c.config, OpDelete)
	return &InsuranceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *InsuranceClient) DeleteOne(i *Insurance) *InsuranceDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *InsuranceClient) DeleteOneID(id int) *InsuranceDeleteOne {
	builder := c.Delete().Where(insurance.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InsuranceDeleteOne{builder}
}

// Create returns a query builder for Insurance.
func (c *InsuranceClient) Query() *InsuranceQuery {
	return &InsuranceQuery{config: c.config}
}

// Get returns a Insurance entity by its id.
func (c *InsuranceClient) Get(ctx context.Context, id int) (*Insurance, error) {
	return c.Query().Where(insurance.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InsuranceClient) GetX(ctx context.Context, id int) *Insurance {
	i, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return i
}

// QueryInsuranceRent queries the InsuranceRent edge of a Insurance.
func (c *InsuranceClient) QueryInsuranceRent(i *Insurance) *RentQuery {
	query := &RentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(insurance.Table, insurance.FieldID, id),
			sqlgraph.To(rent.Table, rent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, insurance.InsuranceRentTable, insurance.InsuranceRentColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InsuranceClient) Hooks() []Hook {
	return c.hooks.Insurance
}

// RentClient is a client for the Rent schema.
type RentClient struct {
	config
}

// NewRentClient returns a client for the Rent from the given config.
func NewRentClient(c config) *RentClient {
	return &RentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `rent.Hooks(f(g(h())))`.
func (c *RentClient) Use(hooks ...Hook) {
	c.hooks.Rent = append(c.hooks.Rent, hooks...)
}

// Create returns a create builder for Rent.
func (c *RentClient) Create() *RentCreate {
	mutation := newRentMutation(c.config, OpCreate)
	return &RentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Rent.
func (c *RentClient) Update() *RentUpdate {
	mutation := newRentMutation(c.config, OpUpdate)
	return &RentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RentClient) UpdateOne(r *Rent) *RentUpdateOne {
	mutation := newRentMutation(c.config, OpUpdateOne, withRent(r))
	return &RentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RentClient) UpdateOneID(id int) *RentUpdateOne {
	mutation := newRentMutation(c.config, OpUpdateOne, withRentID(id))
	return &RentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Rent.
func (c *RentClient) Delete() *RentDelete {
	mutation := newRentMutation(c.config, OpDelete)
	return &RentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RentClient) DeleteOne(r *Rent) *RentDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RentClient) DeleteOneID(id int) *RentDeleteOne {
	builder := c.Delete().Where(rent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RentDeleteOne{builder}
}

// Create returns a query builder for Rent.
func (c *RentClient) Query() *RentQuery {
	return &RentQuery{config: c.config}
}

// Get returns a Rent entity by its id.
func (c *RentClient) Get(ctx context.Context, id int) (*Rent, error) {
	return c.Query().Where(rent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RentClient) GetX(ctx context.Context, id int) *Rent {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRentRoom queries the RentRoom edge of a Rent.
func (c *RentClient) QueryRentRoom(r *Rent) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent.Table, rent.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rent.RentRoomTable, rent.RentRoomColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRentUser queries the RentUser edge of a Rent.
func (c *RentClient) QueryRentUser(r *Rent) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent.Table, rent.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rent.RentUserTable, rent.RentUserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRentInsurance queries the RentInsurance edge of a Rent.
func (c *RentClient) QueryRentInsurance(r *Rent) *InsuranceQuery {
	query := &InsuranceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent.Table, rent.FieldID, id),
			sqlgraph.To(insurance.Table, insurance.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rent.RentInsuranceTable, rent.RentInsuranceColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRentRoomage queries the RentRoomage edge of a Rent.
func (c *RentClient) QueryRentRoomage(r *Rent) *RoomageQuery {
	query := &RoomageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(rent.Table, rent.FieldID, id),
			sqlgraph.To(roomage.Table, roomage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, rent.RentRoomageTable, rent.RentRoomageColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RentClient) Hooks() []Hook {
	return c.hooks.Rent
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Create returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRoomRoomstatus queries the RoomRoomstatus edge of a Room.
func (c *RoomClient) QueryRoomRoomstatus(r *Room) *RoomStatusQuery {
	query := &RoomStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomstatus.Table, roomstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.RoomRoomstatusTable, room.RoomRoomstatusColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomRoomtype queries the RoomRoomtype edge of a Room.
func (c *RoomClient) QueryRoomRoomtype(r *Room) *RoomTypeQuery {
	query := &RoomTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomtype.Table, roomtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.RoomRoomtypeTable, room.RoomRoomtypeColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRoomRent queries the RoomRent edge of a Room.
func (c *RoomClient) QueryRoomRent(r *Room) *RentQuery {
	query := &RentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(rent.Table, rent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.RoomRentTable, room.RoomRentColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// RoomStatusClient is a client for the RoomStatus schema.
type RoomStatusClient struct {
	config
}

// NewRoomStatusClient returns a client for the RoomStatus from the given config.
func NewRoomStatusClient(c config) *RoomStatusClient {
	return &RoomStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomstatus.Hooks(f(g(h())))`.
func (c *RoomStatusClient) Use(hooks ...Hook) {
	c.hooks.RoomStatus = append(c.hooks.RoomStatus, hooks...)
}

// Create returns a create builder for RoomStatus.
func (c *RoomStatusClient) Create() *RoomStatusCreate {
	mutation := newRoomStatusMutation(c.config, OpCreate)
	return &RoomStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RoomStatus.
func (c *RoomStatusClient) Update() *RoomStatusUpdate {
	mutation := newRoomStatusMutation(c.config, OpUpdate)
	return &RoomStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomStatusClient) UpdateOne(rs *RoomStatus) *RoomStatusUpdateOne {
	mutation := newRoomStatusMutation(c.config, OpUpdateOne, withRoomStatus(rs))
	return &RoomStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomStatusClient) UpdateOneID(id int) *RoomStatusUpdateOne {
	mutation := newRoomStatusMutation(c.config, OpUpdateOne, withRoomStatusID(id))
	return &RoomStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomStatus.
func (c *RoomStatusClient) Delete() *RoomStatusDelete {
	mutation := newRoomStatusMutation(c.config, OpDelete)
	return &RoomStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomStatusClient) DeleteOne(rs *RoomStatus) *RoomStatusDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomStatusClient) DeleteOneID(id int) *RoomStatusDeleteOne {
	builder := c.Delete().Where(roomstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomStatusDeleteOne{builder}
}

// Create returns a query builder for RoomStatus.
func (c *RoomStatusClient) Query() *RoomStatusQuery {
	return &RoomStatusQuery{config: c.config}
}

// Get returns a RoomStatus entity by its id.
func (c *RoomStatusClient) Get(ctx context.Context, id int) (*RoomStatus, error) {
	return c.Query().Where(roomstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomStatusClient) GetX(ctx context.Context, id int) *RoomStatus {
	rs, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rs
}

// QueryRoomstatusRoom queries the RoomstatusRoom edge of a RoomStatus.
func (c *RoomStatusClient) QueryRoomstatusRoom(rs *RoomStatus) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomstatus.Table, roomstatus.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomstatus.RoomstatusRoomTable, roomstatus.RoomstatusRoomColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomStatusClient) Hooks() []Hook {
	return c.hooks.RoomStatus
}

// RoomTypeClient is a client for the RoomType schema.
type RoomTypeClient struct {
	config
}

// NewRoomTypeClient returns a client for the RoomType from the given config.
func NewRoomTypeClient(c config) *RoomTypeClient {
	return &RoomTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomtype.Hooks(f(g(h())))`.
func (c *RoomTypeClient) Use(hooks ...Hook) {
	c.hooks.RoomType = append(c.hooks.RoomType, hooks...)
}

// Create returns a create builder for RoomType.
func (c *RoomTypeClient) Create() *RoomTypeCreate {
	mutation := newRoomTypeMutation(c.config, OpCreate)
	return &RoomTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RoomType.
func (c *RoomTypeClient) Update() *RoomTypeUpdate {
	mutation := newRoomTypeMutation(c.config, OpUpdate)
	return &RoomTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomTypeClient) UpdateOne(rt *RoomType) *RoomTypeUpdateOne {
	mutation := newRoomTypeMutation(c.config, OpUpdateOne, withRoomType(rt))
	return &RoomTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomTypeClient) UpdateOneID(id int) *RoomTypeUpdateOne {
	mutation := newRoomTypeMutation(c.config, OpUpdateOne, withRoomTypeID(id))
	return &RoomTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomType.
func (c *RoomTypeClient) Delete() *RoomTypeDelete {
	mutation := newRoomTypeMutation(c.config, OpDelete)
	return &RoomTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomTypeClient) DeleteOne(rt *RoomType) *RoomTypeDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomTypeClient) DeleteOneID(id int) *RoomTypeDeleteOne {
	builder := c.Delete().Where(roomtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomTypeDeleteOne{builder}
}

// Create returns a query builder for RoomType.
func (c *RoomTypeClient) Query() *RoomTypeQuery {
	return &RoomTypeQuery{config: c.config}
}

// Get returns a RoomType entity by its id.
func (c *RoomTypeClient) Get(ctx context.Context, id int) (*RoomType, error) {
	return c.Query().Where(roomtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomTypeClient) GetX(ctx context.Context, id int) *RoomType {
	rt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rt
}

// QueryRoomtypeRoom queries the RoomtypeRoom edge of a RoomType.
func (c *RoomTypeClient) QueryRoomtypeRoom(rt *RoomType) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomtype.Table, roomtype.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomtype.RoomtypeRoomTable, roomtype.RoomtypeRoomColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomTypeClient) Hooks() []Hook {
	return c.hooks.RoomType
}

// RoomageClient is a client for the Roomage schema.
type RoomageClient struct {
	config
}

// NewRoomageClient returns a client for the Roomage from the given config.
func NewRoomageClient(c config) *RoomageClient {
	return &RoomageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomage.Hooks(f(g(h())))`.
func (c *RoomageClient) Use(hooks ...Hook) {
	c.hooks.Roomage = append(c.hooks.Roomage, hooks...)
}

// Create returns a create builder for Roomage.
func (c *RoomageClient) Create() *RoomageCreate {
	mutation := newRoomageMutation(c.config, OpCreate)
	return &RoomageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Roomage.
func (c *RoomageClient) Update() *RoomageUpdate {
	mutation := newRoomageMutation(c.config, OpUpdate)
	return &RoomageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomageClient) UpdateOne(r *Roomage) *RoomageUpdateOne {
	mutation := newRoomageMutation(c.config, OpUpdateOne, withRoomage(r))
	return &RoomageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomageClient) UpdateOneID(id int) *RoomageUpdateOne {
	mutation := newRoomageMutation(c.config, OpUpdateOne, withRoomageID(id))
	return &RoomageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Roomage.
func (c *RoomageClient) Delete() *RoomageDelete {
	mutation := newRoomageMutation(c.config, OpDelete)
	return &RoomageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomageClient) DeleteOne(r *Roomage) *RoomageDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomageClient) DeleteOneID(id int) *RoomageDeleteOne {
	builder := c.Delete().Where(roomage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomageDeleteOne{builder}
}

// Create returns a query builder for Roomage.
func (c *RoomageClient) Query() *RoomageQuery {
	return &RoomageQuery{config: c.config}
}

// Get returns a Roomage entity by its id.
func (c *RoomageClient) Get(ctx context.Context, id int) (*Roomage, error) {
	return c.Query().Where(roomage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomageClient) GetX(ctx context.Context, id int) *Roomage {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryRoomageRent queries the RoomageRent edge of a Roomage.
func (c *RoomageClient) QueryRoomageRent(r *Roomage) *RentQuery {
	query := &RentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomage.Table, roomage.FieldID, id),
			sqlgraph.To(rent.Table, rent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomage.RoomageRentTable, roomage.RoomageRentColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomageClient) Hooks() []Hook {
	return c.hooks.Roomage
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryUserRent queries the UserRent edge of a User.
func (c *UserClient) QueryUserRent(u *User) *RentQuery {
	query := &RentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(rent.Table, rent.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.UserRentTable, user.UserRentColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserUserstatus queries the UserUserstatus edge of a User.
func (c *UserClient) QueryUserUserstatus(u *User) *UserStatusQuery {
	query := &UserStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userstatus.Table, userstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.UserUserstatusTable, user.UserUserstatusColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserStatusClient is a client for the UserStatus schema.
type UserStatusClient struct {
	config
}

// NewUserStatusClient returns a client for the UserStatus from the given config.
func NewUserStatusClient(c config) *UserStatusClient {
	return &UserStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userstatus.Hooks(f(g(h())))`.
func (c *UserStatusClient) Use(hooks ...Hook) {
	c.hooks.UserStatus = append(c.hooks.UserStatus, hooks...)
}

// Create returns a create builder for UserStatus.
func (c *UserStatusClient) Create() *UserStatusCreate {
	mutation := newUserStatusMutation(c.config, OpCreate)
	return &UserStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for UserStatus.
func (c *UserStatusClient) Update() *UserStatusUpdate {
	mutation := newUserStatusMutation(c.config, OpUpdate)
	return &UserStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserStatusClient) UpdateOne(us *UserStatus) *UserStatusUpdateOne {
	mutation := newUserStatusMutation(c.config, OpUpdateOne, withUserStatus(us))
	return &UserStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserStatusClient) UpdateOneID(id int) *UserStatusUpdateOne {
	mutation := newUserStatusMutation(c.config, OpUpdateOne, withUserStatusID(id))
	return &UserStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserStatus.
func (c *UserStatusClient) Delete() *UserStatusDelete {
	mutation := newUserStatusMutation(c.config, OpDelete)
	return &UserStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserStatusClient) DeleteOne(us *UserStatus) *UserStatusDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserStatusClient) DeleteOneID(id int) *UserStatusDeleteOne {
	builder := c.Delete().Where(userstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserStatusDeleteOne{builder}
}

// Create returns a query builder for UserStatus.
func (c *UserStatusClient) Query() *UserStatusQuery {
	return &UserStatusQuery{config: c.config}
}

// Get returns a UserStatus entity by its id.
func (c *UserStatusClient) Get(ctx context.Context, id int) (*UserStatus, error) {
	return c.Query().Where(userstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserStatusClient) GetX(ctx context.Context, id int) *UserStatus {
	us, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return us
}

// QueryUserstatusUser queries the UserstatusUser edge of a UserStatus.
func (c *UserStatusClient) QueryUserstatusUser(us *UserStatus) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userstatus.Table, userstatus.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userstatus.UserstatusUserTable, userstatus.UserstatusUserColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserStatusClient) Hooks() []Hook {
	return c.hooks.UserStatus
}
