// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/PON/app/ent/rent"
	"github.com/PON/app/ent/user"
	"github.com/PON/app/ent/userstatus"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetUserEmail sets the UserEmail field.
func (uc *UserCreate) SetUserEmail(s string) *UserCreate {
	uc.mutation.SetUserEmail(s)
	return uc
}

// SetNAME sets the NAME field.
func (uc *UserCreate) SetNAME(s string) *UserCreate {
	uc.mutation.SetNAME(s)
	return uc
}

// AddUserRentIDs adds the UserRent edge to Rent by ids.
func (uc *UserCreate) AddUserRentIDs(ids ...int) *UserCreate {
	uc.mutation.AddUserRentIDs(ids...)
	return uc
}

// AddUserRent adds the UserRent edges to Rent.
func (uc *UserCreate) AddUserRent(r ...*Rent) *UserCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return uc.AddUserRentIDs(ids...)
}

// SetUserUserstatusID sets the UserUserstatus edge to UserStatus by id.
func (uc *UserCreate) SetUserUserstatusID(id int) *UserCreate {
	uc.mutation.SetUserUserstatusID(id)
	return uc
}

// SetNillableUserUserstatusID sets the UserUserstatus edge to UserStatus by id if the given value is not nil.
func (uc *UserCreate) SetNillableUserUserstatusID(id *int) *UserCreate {
	if id != nil {
		uc = uc.SetUserUserstatusID(*id)
	}
	return uc
}

// SetUserUserstatus sets the UserUserstatus edge to UserStatus.
func (uc *UserCreate) SetUserUserstatus(u *UserStatus) *UserCreate {
	return uc.SetUserUserstatusID(u.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uc *UserCreate) Mutation() *UserMutation {
	return uc.mutation
}

// Save creates the User in the database.
func (uc *UserCreate) Save(ctx context.Context) (*User, error) {
	if _, ok := uc.mutation.UserEmail(); !ok {
		return nil, &ValidationError{Name: "UserEmail", err: errors.New("ent: missing required field \"UserEmail\"")}
	}
	if _, ok := uc.mutation.NAME(); !ok {
		return nil, &ValidationError{Name: "NAME", err: errors.New("ent: missing required field \"NAME\"")}
	}
	var (
		err  error
		node *User
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UserCreate) SaveX(ctx context.Context) *User {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	u, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}

func (uc *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		u     = &User{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: user.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.UserEmail(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldUserEmail,
		})
		u.UserEmail = value
	}
	if value, ok := uc.mutation.NAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldNAME,
		})
		u.NAME = value
	}
	if nodes := uc.mutation.UserRentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.UserRentTable,
			Columns: []string{user.UserRentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: rent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.UserUserstatusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserUserstatusTable,
			Columns: []string{user.UserUserstatusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: userstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return u, _spec
}
