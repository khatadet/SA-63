// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/PON/app/ent/roomage"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Roomage is the model entity for the Roomage schema.
type Roomage struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// RoomAge holds the value of the "RoomAge" field.
	RoomAge int `json:"RoomAge,omitempty"`
	// Text holds the value of the "Text" field.
	Text string `json:"Text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomageQuery when eager-loading is set.
	Edges RoomageEdges `json:"edges"`
}

// RoomageEdges holds the relations/edges for other nodes in the graph.
type RoomageEdges struct {
	// RoomageRent holds the value of the RoomageRent edge.
	RoomageRent []*Rent
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoomageRentOrErr returns the RoomageRent value or an error if the edge
// was not loaded in eager-loading.
func (e RoomageEdges) RoomageRentOrErr() ([]*Rent, error) {
	if e.loadedTypes[0] {
		return e.RoomageRent, nil
	}
	return nil, &NotLoadedError{edge: "RoomageRent"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Roomage) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // RoomAge
		&sql.NullString{}, // Text
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Roomage fields.
func (r *Roomage) assignValues(values ...interface{}) error {
	if m, n := len(values), len(roomage.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field RoomAge", values[0])
	} else if value.Valid {
		r.RoomAge = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Text", values[1])
	} else if value.Valid {
		r.Text = value.String
	}
	return nil
}

// QueryRoomageRent queries the RoomageRent edge of the Roomage.
func (r *Roomage) QueryRoomageRent() *RentQuery {
	return (&RoomageClient{config: r.config}).QueryRoomageRent(r)
}

// Update returns a builder for updating this Roomage.
// Note that, you need to call Roomage.Unwrap() before calling this method, if this Roomage
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Roomage) Update() *RoomageUpdateOne {
	return (&RoomageClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Roomage) Unwrap() *Roomage {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Roomage is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Roomage) String() string {
	var builder strings.Builder
	builder.WriteString("Roomage(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", RoomAge=")
	builder.WriteString(fmt.Sprintf("%v", r.RoomAge))
	builder.WriteString(", Text=")
	builder.WriteString(r.Text)
	builder.WriteByte(')')
	return builder.String()
}

// Roomages is a parsable slice of Roomage.
type Roomages []*Roomage

func (r Roomages) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
