// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/PON/app/ent/insurance"
	"github.com/PON/app/ent/rent"
	"github.com/PON/app/ent/room"
	"github.com/PON/app/ent/roomage"
	"github.com/PON/app/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RentCreate is the builder for creating a Rent entity.
type RentCreate struct {
	config
	mutation *RentMutation
	hooks    []Hook
}

// SetRentAge sets the RentAge field.
func (rc *RentCreate) SetRentAge(s string) *RentCreate {
	rc.mutation.SetRentAge(s)
	return rc
}

// SetCidUser sets the CidUser field.
func (rc *RentCreate) SetCidUser(s string) *RentCreate {
	rc.mutation.SetCidUser(s)
	return rc
}

// SetRentDate sets the RentDate field.
func (rc *RentCreate) SetRentDate(s string) *RentCreate {
	rc.mutation.SetRentDate(s)
	return rc
}

// SetRentRoomID sets the RentRoom edge to Room by id.
func (rc *RentCreate) SetRentRoomID(id int) *RentCreate {
	rc.mutation.SetRentRoomID(id)
	return rc
}

// SetNillableRentRoomID sets the RentRoom edge to Room by id if the given value is not nil.
func (rc *RentCreate) SetNillableRentRoomID(id *int) *RentCreate {
	if id != nil {
		rc = rc.SetRentRoomID(*id)
	}
	return rc
}

// SetRentRoom sets the RentRoom edge to Room.
func (rc *RentCreate) SetRentRoom(r *Room) *RentCreate {
	return rc.SetRentRoomID(r.ID)
}

// SetRentUserID sets the RentUser edge to User by id.
func (rc *RentCreate) SetRentUserID(id int) *RentCreate {
	rc.mutation.SetRentUserID(id)
	return rc
}

// SetNillableRentUserID sets the RentUser edge to User by id if the given value is not nil.
func (rc *RentCreate) SetNillableRentUserID(id *int) *RentCreate {
	if id != nil {
		rc = rc.SetRentUserID(*id)
	}
	return rc
}

// SetRentUser sets the RentUser edge to User.
func (rc *RentCreate) SetRentUser(u *User) *RentCreate {
	return rc.SetRentUserID(u.ID)
}

// SetRentInsuranceID sets the RentInsurance edge to Insurance by id.
func (rc *RentCreate) SetRentInsuranceID(id int) *RentCreate {
	rc.mutation.SetRentInsuranceID(id)
	return rc
}

// SetNillableRentInsuranceID sets the RentInsurance edge to Insurance by id if the given value is not nil.
func (rc *RentCreate) SetNillableRentInsuranceID(id *int) *RentCreate {
	if id != nil {
		rc = rc.SetRentInsuranceID(*id)
	}
	return rc
}

// SetRentInsurance sets the RentInsurance edge to Insurance.
func (rc *RentCreate) SetRentInsurance(i *Insurance) *RentCreate {
	return rc.SetRentInsuranceID(i.ID)
}

// SetRentRoomageID sets the RentRoomage edge to Roomage by id.
func (rc *RentCreate) SetRentRoomageID(id int) *RentCreate {
	rc.mutation.SetRentRoomageID(id)
	return rc
}

// SetNillableRentRoomageID sets the RentRoomage edge to Roomage by id if the given value is not nil.
func (rc *RentCreate) SetNillableRentRoomageID(id *int) *RentCreate {
	if id != nil {
		rc = rc.SetRentRoomageID(*id)
	}
	return rc
}

// SetRentRoomage sets the RentRoomage edge to Roomage.
func (rc *RentCreate) SetRentRoomage(r *Roomage) *RentCreate {
	return rc.SetRentRoomageID(r.ID)
}

// Mutation returns the RentMutation object of the builder.
func (rc *RentCreate) Mutation() *RentMutation {
	return rc.mutation
}

// Save creates the Rent in the database.
func (rc *RentCreate) Save(ctx context.Context) (*Rent, error) {
	if _, ok := rc.mutation.RentAge(); !ok {
		return nil, &ValidationError{Name: "RentAge", err: errors.New("ent: missing required field \"RentAge\"")}
	}
	if v, ok := rc.mutation.RentAge(); ok {
		if err := rent.RentAgeValidator(v); err != nil {
			return nil, &ValidationError{Name: "RentAge", err: fmt.Errorf("ent: validator failed for field \"RentAge\": %w", err)}
		}
	}
	if _, ok := rc.mutation.CidUser(); !ok {
		return nil, &ValidationError{Name: "CidUser", err: errors.New("ent: missing required field \"CidUser\"")}
	}
	if v, ok := rc.mutation.CidUser(); ok {
		if err := rent.CidUserValidator(v); err != nil {
			return nil, &ValidationError{Name: "CidUser", err: fmt.Errorf("ent: validator failed for field \"CidUser\": %w", err)}
		}
	}
	if _, ok := rc.mutation.RentDate(); !ok {
		return nil, &ValidationError{Name: "RentDate", err: errors.New("ent: missing required field \"RentDate\"")}
	}
	if v, ok := rc.mutation.RentDate(); ok {
		if err := rent.RentDateValidator(v); err != nil {
			return nil, &ValidationError{Name: "RentDate", err: fmt.Errorf("ent: validator failed for field \"RentDate\": %w", err)}
		}
	}
	var (
		err  error
		node *Rent
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RentCreate) SaveX(ctx context.Context) *Rent {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RentCreate) sqlSave(ctx context.Context) (*Rent, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RentCreate) createSpec() (*Rent, *sqlgraph.CreateSpec) {
	var (
		r     = &Rent{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: rent.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: rent.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.RentAge(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rent.FieldRentAge,
		})
		r.RentAge = value
	}
	if value, ok := rc.mutation.CidUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rent.FieldCidUser,
		})
		r.CidUser = value
	}
	if value, ok := rc.mutation.RentDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rent.FieldRentDate,
		})
		r.RentDate = value
	}
	if nodes := rc.mutation.RentRoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomTable,
			Columns: []string{rent.RentRoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RentUserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentUserTable,
			Columns: []string{rent.RentUserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RentInsuranceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentInsuranceTable,
			Columns: []string{rent.RentInsuranceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: insurance.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RentRoomageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rent.RentRoomageTable,
			Columns: []string{rent.RentRoomageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
