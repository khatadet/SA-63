/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersRent,
    ControllersRentFromJSON,
    ControllersRentToJSON,
    EntInsurance,
    EntInsuranceFromJSON,
    EntInsuranceToJSON,
    EntRent,
    EntRentFromJSON,
    EntRentToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntRoomStatus,
    EntRoomStatusFromJSON,
    EntRoomStatusToJSON,
    EntRoomType,
    EntRoomTypeFromJSON,
    EntRoomTypeToJSON,
    EntRoomage,
    EntRoomageFromJSON,
    EntRoomageToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
    EntUserStatus,
    EntUserStatusFromJSON,
    EntUserStatusToJSON,
} from '../models';

export interface CreateInsuranceRequest {
    insurance: EntInsurance;
}

export interface CreateRentRequest {
    rent: ControllersRent;
}

export interface CreateRoomRequest {
    room: EntRoom;
}

export interface CreateRoomStatusRequest {
    roomStatus: EntRoomStatus;
}

export interface CreateRoomTypeRequest {
    roomType: EntRoomType;
}

export interface CreateRoomageRequest {
    roomage: EntRoomage;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface CreateUserStatusRequest {
    userStatus: EntUserStatus;
}

export interface DeleteRentRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetInsuranceRequest {
    id: number;
}

export interface GetRentRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface GetRoomageRequest {
    id: number;
}

export interface GetRoomstatusRequest {
    id: number;
}

export interface GetRoomtypeRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface GetUserstatusRequest {
    id: number;
}

export interface ListInsuranceRequest {
    limit?: number;
    offset?: number;
}

export interface ListRentRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomageRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserstatusRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateInsuranceRequest {
    id: number;
    insurance: EntInsurance;
}

export interface UpdateRoomRequest {
    id: number;
    room: EntRoom;
}

export interface UpdateRoomageRequest {
    id: number;
    roomage: EntRoomage;
}

export interface UpdateRoomstatusRequest {
    id: number;
    roomstatus: EntRoomStatus;
}

export interface UpdateRoomtypeRequest {
    id: number;
    roomtype: EntRoomType;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

export interface UpdateUserstatusRequest {
    id: number;
    userstatus: EntUserStatus;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create Insurance
     * Create Insurance
     */
    async createInsuranceRaw(requestParameters: CreateInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.insurance === null || requestParameters.insurance === undefined) {
            throw new runtime.RequiredError('insurance','Required parameter requestParameters.insurance was null or undefined when calling createInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Insurances`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntInsuranceToJSON(requestParameters.insurance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * Create Insurance
     * Create Insurance
     */
    async createInsurance(requestParameters: CreateInsuranceRequest): Promise<EntInsurance> {
        const response = await this.createInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Rent
     * Create Rent
     */
    async createRentRaw(requestParameters: CreateRentRequest): Promise<runtime.ApiResponse<ControllersRent>> {
        if (requestParameters.rent === null || requestParameters.rent === undefined) {
            throw new runtime.RequiredError('rent','Required parameter requestParameters.rent was null or undefined when calling createRent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRentToJSON(requestParameters.rent),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersRentFromJSON(jsonValue));
    }

    /**
     * Create Rent
     * Create Rent
     */
    async createRent(requestParameters: CreateRentRequest): Promise<ControllersRent> {
        const response = await this.createRentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Room
     * Create Room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create Room
     * Create Room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create RoomStatus
     * Create RoomStatus
     */
    async createRoomStatusRaw(requestParameters: CreateRoomStatusRequest): Promise<runtime.ApiResponse<EntRoomStatus>> {
        if (requestParameters.roomStatus === null || requestParameters.roomStatus === undefined) {
            throw new runtime.RequiredError('roomStatus','Required parameter requestParameters.roomStatus was null or undefined when calling createRoomStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/RoomStatuss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomStatusToJSON(requestParameters.roomStatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomStatusFromJSON(jsonValue));
    }

    /**
     * Create RoomStatus
     * Create RoomStatus
     */
    async createRoomStatus(requestParameters: CreateRoomStatusRequest): Promise<EntRoomStatus> {
        const response = await this.createRoomStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create RoomType
     * Create RoomType
     */
    async createRoomTypeRaw(requestParameters: CreateRoomTypeRequest): Promise<runtime.ApiResponse<EntRoomType>> {
        if (requestParameters.roomType === null || requestParameters.roomType === undefined) {
            throw new runtime.RequiredError('roomType','Required parameter requestParameters.roomType was null or undefined when calling createRoomType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/RoomTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomTypeToJSON(requestParameters.roomType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomTypeFromJSON(jsonValue));
    }

    /**
     * Create RoomType
     * Create RoomType
     */
    async createRoomType(requestParameters: CreateRoomTypeRequest): Promise<EntRoomType> {
        const response = await this.createRoomTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Roomage
     * Create Roomage
     */
    async createRoomageRaw(requestParameters: CreateRoomageRequest): Promise<runtime.ApiResponse<EntRoomage>> {
        if (requestParameters.roomage === null || requestParameters.roomage === undefined) {
            throw new runtime.RequiredError('roomage','Required parameter requestParameters.roomage was null or undefined when calling createRoomage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Roomages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomageToJSON(requestParameters.roomage),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomageFromJSON(jsonValue));
    }

    /**
     * Create Roomage
     * Create Roomage
     */
    async createRoomage(requestParameters: CreateRoomageRequest): Promise<EntRoomage> {
        const response = await this.createRoomageRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create UserStatus
     * Create UserStatus
     */
    async createUserStatusRaw(requestParameters: CreateUserStatusRequest): Promise<runtime.ApiResponse<EntUserStatus>> {
        if (requestParameters.userStatus === null || requestParameters.userStatus === undefined) {
            throw new runtime.RequiredError('userStatus','Required parameter requestParameters.userStatus was null or undefined when calling createUserStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/UserStatuss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserStatusToJSON(requestParameters.userStatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserStatusFromJSON(jsonValue));
    }

    /**
     * Create UserStatus
     * Create UserStatus
     */
    async createUserStatus(requestParameters: CreateUserStatusRequest): Promise<EntUserStatus> {
        const response = await this.createUserStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get rent by ID
     * Delete a rent entity by ID
     */
    async deleteRentRaw(requestParameters: DeleteRentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get rent by ID
     * Delete a rent entity by ID
     */
    async deleteRent(requestParameters: DeleteRentRequest): Promise<object> {
        const response = await this.deleteRentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Insurance by ID
     * Get a Insurance entity by ID
     */
    async getInsuranceRaw(requestParameters: GetInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * get Insurance by ID
     * Get a Insurance entity by ID
     */
    async getInsurance(requestParameters: GetInsuranceRequest): Promise<EntInsurance> {
        const response = await this.getInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Rent by ID
     * Get a Rent entity by ID
     */
    async getRentRaw(requestParameters: GetRentRequest): Promise<runtime.ApiResponse<EntRent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRentFromJSON(jsonValue));
    }

    /**
     * get Rent by ID
     * Get a Rent entity by ID
     */
    async getRent(requestParameters: GetRentRequest): Promise<EntRent> {
        const response = await this.getRentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Room by ID
     * Get a Room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get Room by ID
     * Get a Room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Roomage by ID
     * Get a Roomage entity by ID
     */
    async getRoomageRaw(requestParameters: GetRoomageRequest): Promise<runtime.ApiResponse<EntRoomage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomageFromJSON(jsonValue));
    }

    /**
     * get Roomage by ID
     * Get a Roomage entity by ID
     */
    async getRoomage(requestParameters: GetRoomageRequest): Promise<EntRoomage> {
        const response = await this.getRoomageRaw(requestParameters);
        return await response.value();
    }

    /**
     * get RoomStatus by ID
     * Get a RoomStatus entity by ID
     */
    async getRoomstatusRaw(requestParameters: GetRoomstatusRequest): Promise<runtime.ApiResponse<EntRoomStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomStatusFromJSON(jsonValue));
    }

    /**
     * get RoomStatus by ID
     * Get a RoomStatus entity by ID
     */
    async getRoomstatus(requestParameters: GetRoomstatusRequest): Promise<EntRoomStatus> {
        const response = await this.getRoomstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get RoomType by ID
     * Get a RoomType entity by ID
     */
    async getRoomtypeRaw(requestParameters: GetRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomTypeFromJSON(jsonValue));
    }

    /**
     * get RoomType by ID
     * Get a RoomType entity by ID
     */
    async getRoomtype(requestParameters: GetRoomtypeRequest): Promise<EntRoomType> {
        const response = await this.getRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get UserStatus by ID
     * Get a UserStatus entity by ID
     */
    async getUserstatusRaw(requestParameters: GetUserstatusRequest): Promise<runtime.ApiResponse<EntUserStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserStatusFromJSON(jsonValue));
    }

    /**
     * get UserStatus by ID
     * Get a UserStatus entity by ID
     */
    async getUserstatus(requestParameters: GetUserstatusRequest): Promise<EntUserStatus> {
        const response = await this.getUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsuranceRaw(requestParameters: ListInsuranceRequest): Promise<runtime.ApiResponse<Array<EntInsurance>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/insurances`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInsuranceFromJSON));
    }

    /**
     * list insurance entities
     * List insurance entities
     */
    async listInsurance(requestParameters: ListInsuranceRequest): Promise<Array<EntInsurance>> {
        const response = await this.listInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list rent entities
     * List rent entities
     */
    async listRentRaw(requestParameters: ListRentRequest): Promise<runtime.ApiResponse<Array<EntRent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRentFromJSON));
    }

    /**
     * list rent entities
     * List rent entities
     */
    async listRent(requestParameters: ListRentRequest): Promise<Array<EntRent>> {
        const response = await this.listRentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomage entities
     * List roomage entities
     */
    async listRoomageRaw(requestParameters: ListRoomageRequest): Promise<runtime.ApiResponse<Array<EntRoomage>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomageFromJSON));
    }

    /**
     * list roomage entities
     * List roomage entities
     */
    async listRoomage(requestParameters: ListRoomageRequest): Promise<Array<EntRoomage>> {
        const response = await this.listRoomageRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomstatus entities
     * List roomstatus entities
     */
    async listRoomstatusRaw(requestParameters: ListRoomstatusRequest): Promise<runtime.ApiResponse<Array<EntRoomStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomstatuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomStatusFromJSON));
    }

    /**
     * list roomstatus entities
     * List roomstatus entities
     */
    async listRoomstatus(requestParameters: ListRoomstatusRequest): Promise<Array<EntRoomStatus>> {
        const response = await this.listRoomstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtypeRaw(requestParameters: ListRoomtypeRequest): Promise<runtime.ApiResponse<Array<EntRoomType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomTypeFromJSON));
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtype(requestParameters: ListRoomtypeRequest): Promise<Array<EntRoomType>> {
        const response = await this.listRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list userstatus entities
     * List userstatus entities
     */
    async listUserstatusRaw(requestParameters: ListUserstatusRequest): Promise<runtime.ApiResponse<Array<EntUserStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatuss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserStatusFromJSON));
    }

    /**
     * list userstatus entities
     * List userstatus entities
     */
    async listUserstatus(requestParameters: ListUserstatusRequest): Promise<Array<EntUserStatus>> {
        const response = await this.listUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update insurance by ID
     * Update a insurance entity by ID
     */
    async updateInsuranceRaw(requestParameters: UpdateInsuranceRequest): Promise<runtime.ApiResponse<EntInsurance>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInsurance.');
        }

        if (requestParameters.insurance === null || requestParameters.insurance === undefined) {
            throw new runtime.RequiredError('insurance','Required parameter requestParameters.insurance was null or undefined when calling updateInsurance.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/insurances/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntInsuranceToJSON(requestParameters.insurance),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInsuranceFromJSON(jsonValue));
    }

    /**
     * update insurance by ID
     * Update a insurance entity by ID
     */
    async updateInsurance(requestParameters: UpdateInsuranceRequest): Promise<EntInsurance> {
        const response = await this.updateInsuranceRaw(requestParameters);
        return await response.value();
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoomRaw(requestParameters: UpdateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoom.');
        }

        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling updateRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoom(requestParameters: UpdateRoomRequest): Promise<EntRoom> {
        const response = await this.updateRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update roomage by ID
     * Update a roomage entity by ID
     */
    async updateRoomageRaw(requestParameters: UpdateRoomageRequest): Promise<runtime.ApiResponse<EntRoomage>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoomage.');
        }

        if (requestParameters.roomage === null || requestParameters.roomage === undefined) {
            throw new runtime.RequiredError('roomage','Required parameter requestParameters.roomage was null or undefined when calling updateRoomage.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomageToJSON(requestParameters.roomage),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomageFromJSON(jsonValue));
    }

    /**
     * update roomage by ID
     * Update a roomage entity by ID
     */
    async updateRoomage(requestParameters: UpdateRoomageRequest): Promise<EntRoomage> {
        const response = await this.updateRoomageRaw(requestParameters);
        return await response.value();
    }

    /**
     * update roomstatus by ID
     * Update a roomstatus entity by ID
     */
    async updateRoomstatusRaw(requestParameters: UpdateRoomstatusRequest): Promise<runtime.ApiResponse<EntRoomStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoomstatus.');
        }

        if (requestParameters.roomstatus === null || requestParameters.roomstatus === undefined) {
            throw new runtime.RequiredError('roomstatus','Required parameter requestParameters.roomstatus was null or undefined when calling updateRoomstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomStatusToJSON(requestParameters.roomstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomStatusFromJSON(jsonValue));
    }

    /**
     * update roomstatus by ID
     * Update a roomstatus entity by ID
     */
    async updateRoomstatus(requestParameters: UpdateRoomstatusRequest): Promise<EntRoomStatus> {
        const response = await this.updateRoomstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update roomtype by ID
     * Update a roomtype entity by ID
     */
    async updateRoomtypeRaw(requestParameters: UpdateRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoomtype.');
        }

        if (requestParameters.roomtype === null || requestParameters.roomtype === undefined) {
            throw new runtime.RequiredError('roomtype','Required parameter requestParameters.roomtype was null or undefined when calling updateRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomTypeToJSON(requestParameters.roomtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomTypeFromJSON(jsonValue));
    }

    /**
     * update roomtype by ID
     * Update a roomtype entity by ID
     */
    async updateRoomtype(requestParameters: UpdateRoomtypeRequest): Promise<EntRoomType> {
        const response = await this.updateRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update userstatus by ID
     * Update a userstatus entity by ID
     */
    async updateUserstatusRaw(requestParameters: UpdateUserstatusRequest): Promise<runtime.ApiResponse<EntUserStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserstatus.');
        }

        if (requestParameters.userstatus === null || requestParameters.userstatus === undefined) {
            throw new runtime.RequiredError('userstatus','Required parameter requestParameters.userstatus was null or undefined when calling updateUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/userstatuss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserStatusToJSON(requestParameters.userstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserStatusFromJSON(jsonValue));
    }

    /**
     * update userstatus by ID
     * Update a userstatus entity by ID
     */
    async updateUserstatus(requestParameters: UpdateUserstatusRequest): Promise<EntUserStatus> {
        const response = await this.updateUserstatusRaw(requestParameters);
        return await response.value();
    }

}
